// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace theophLinPBPK1_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/data/home/ahmede/projects/git/metrumresearchgroup/BayesPBPK/model/stan/theophLinPBPK1/theophLinPBPK1.stan");
    reader.add_event(501, 499, "end", "/data/home/ahmede/projects/git/metrumresearchgroup/BayesPBPK/model/stan/theophLinPBPK1/theophLinPBPK1.stan");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type, Eigen::Dynamic, 1>
calcKpPT(const T0__& logP,
             const T1__& pKa,
             const T2__& fu,
             const T3__& BP,
             const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& TC, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 10;
        local_scalar_t__ logD(DUMMY_VAR__);
        (void) logD;  // dummy to suppress unused var warning
        stan::math::initialize(logD, DUMMY_VAR__);
        stan::math::fill(logD, DUMMY_VAR__);

        current_statement_begin__ = 11;
        local_scalar_t__ logDStar(DUMMY_VAR__);
        (void) logDStar;  // dummy to suppress unused var warning
        stan::math::initialize(logDStar, DUMMY_VAR__);
        stan::math::fill(logDStar, DUMMY_VAR__);

        current_statement_begin__ = 12;
        local_scalar_t__ DStar(DUMMY_VAR__);
        (void) DStar;  // dummy to suppress unused var warning
        stan::math::initialize(DStar, DUMMY_VAR__);
        stan::math::fill(DStar, DUMMY_VAR__);

        current_statement_begin__ = 13;
        local_scalar_t__ P(DUMMY_VAR__);
        (void) P;  // dummy to suppress unused var warning
        stan::math::initialize(P, DUMMY_VAR__);
        stan::math::fill(P, DUMMY_VAR__);

        current_statement_begin__ = 14;
        local_scalar_t__ fut(DUMMY_VAR__);
        (void) fut;  // dummy to suppress unused var warning
        stan::math::initialize(fut, DUMMY_VAR__);
        stan::math::fill(fut, DUMMY_VAR__);

        current_statement_begin__ = 15;
        validate_non_negative_index("Kp", "11", 11);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Kp(11);
        stan::math::initialize(Kp, DUMMY_VAR__);
        stan::math::fill(Kp, DUMMY_VAR__);


        current_statement_begin__ = 17;
        stan::math::assign(logD, ((1.115 * logP) - 1.35));
        current_statement_begin__ = 18;
        stan::math::assign(logDStar, (logD - stan::math::log10((1 + pow(10, (pKa - get_base1(TC, 1, 5, "TC", 1)))))));
        current_statement_begin__ = 19;
        stan::math::assign(DStar, pow(10, logDStar));
        current_statement_begin__ = 20;
        stan::math::assign(P, pow(10, logP));
        current_statement_begin__ = 21;
        stan::math::assign(fut, (1 / (1 + (((1 - fu) / fu) * 0.5))));
        current_statement_begin__ = 24;
        stan::model::assign(Kp, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    ((((DStar * (get_base1(TC, 1, 3, "TC", 1) + (0.3 * get_base1(TC, 1, 4, "TC", 1)))) + (1 * (get_base1(TC, 1, 2, "TC", 1) + (0.7 * get_base1(TC, 1, 4, "TC", 1))))) / ((DStar * (get_base1(TC, 12, 3, "TC", 1) + (0.3 * get_base1(TC, 12, 4, "TC", 1)))) + (1 * (get_base1(TC, 12, 2, "TC", 1) + (0.7 * get_base1(TC, 12, 4, "TC", 1)))))) * fu), 
                    "assigning variable Kp");
        current_statement_begin__ = 27;
        stan::model::assign(Kp, 
                    stan::model::cons_list(stan::model::index_min_max(2, 11), stan::model::nil_index_list()), 
                    multiply(elt_divide(add(multiply(P, add(stan::model::rvalue(TC, stan::model::cons_list(stan::model::index_min_max(2, 11), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), "TC"), multiply(0.3, stan::model::rvalue(TC, stan::model::cons_list(stan::model::index_min_max(2, 11), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), "TC")))), multiply(1, add(stan::model::rvalue(TC, stan::model::cons_list(stan::model::index_min_max(2, 11), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TC"), multiply(0.7, stan::model::rvalue(TC, stan::model::cons_list(stan::model::index_min_max(2, 11), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), "TC"))))), ((P * (get_base1(TC, 12, 3, "TC", 1) + (0.3 * get_base1(TC, 12, 4, "TC", 1)))) + (1 * (get_base1(TC, 12, 2, "TC", 1) + (0.7 * get_base1(TC, 12, 4, "TC", 1)))))), (fu / fut)), 
                    "assigning variable Kp");
        current_statement_begin__ = 29;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Kp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calcKpPT_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type, Eigen::Dynamic, 1>
    operator()(const T0__& logP,
             const T1__& pKa,
             const T2__& fu,
             const T3__& BP,
             const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& TC, std::ostream* pstream__) const {
        return calcKpPT(logP, pKa, fu, BP, TC, pstream__);
    }
};

class theophLinPBPK1_model : public prob_grad {
private:
        int nSubject;
        int nt;
        int nObs;
        std::vector<int> iObs;
        std::vector<double> amt;
        std::vector<int> cmt;
        std::vector<int> evid;
        std::vector<int> start;
        std::vector<int> end;
        std::vector<double> time;
        row_vector_d cObs;
        std::vector<double> weight;
        std::vector<double> height;
        std::vector<double> rate;
        std::vector<double> ii;
        std::vector<int> addl;
        std::vector<int> ss;
        matrix_d TC;
        double pKaPrior;
        double fuPrior;
        double logPPrior;
        double BPPrior;
        double VadMeanPrior;
        double VarMeanPrior;
        double VboMeanPrior;
        double VbrMeanPrior;
        double VguMeanPrior;
        double VheMeanPrior;
        double VkiMeanPrior;
        double VliMeanPrior;
        double VluMeanPrior;
        double VmuMeanPrior;
        double VskMeanPrior;
        double VspMeanPrior;
        double VveMeanPrior;
        double VadGSDPrior;
        double VarCVPrior;
        double VboCVPrior;
        double VbrCVPrior;
        double VguCVPrior;
        double VheCVPrior;
        double VkiCVPrior;
        double VliCVPrior;
        double VluGSDPrior;
        double VmuGSDPrior;
        double VskCVPrior;
        double VspGSDPrior;
        double VveCVPrior;
        std::vector<double> Var;
        std::vector<double> Vbr;
        std::vector<double> Vgu;
        std::vector<double> Vhe;
        std::vector<double> Vki;
        std::vector<double> Vli;
        std::vector<double> Vlu;
        std::vector<double> Vsk;
        std::vector<double> Vsp;
        std::vector<double> Vve;
        double COMeanPrior;
        double COCVPrior;
        std::vector<double> Qad;
        std::vector<double> Qbo;
        std::vector<double> Qbr;
        std::vector<double> Qha;
        std::vector<double> Qhe;
        std::vector<double> Qmu;
        std::vector<double> Qsk;
        std::vector<double> Qsp;
        double CLhepaticPrior;
        double CLrenalPrior;
        double VmuUpper;
        double VmuLower;
        double VboUpper;
        double VboLower;
        double QguUpper;
        double QguLower;
        double QkiUpper;
        double QkiLower;
        double fuUpper;
        double fuLower;
        double CLhepaticUpper;
        double CLhepaticLower;
        int nRandom;
        int nParms;
        int nCmt;
        int nOrgans;
        std::vector<double> F;
        std::vector<double> tlag;
public:
    theophLinPBPK1_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    theophLinPBPK1_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "theophLinPBPK1_model_namespace::theophLinPBPK1_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "nSubject", "int", context__.to_vec());
            nSubject = int(0);
            vals_i__ = context__.vals_i("nSubject");
            pos__ = 0;
            nSubject = vals_i__[pos__++];
            check_greater_or_equal(function__, "nSubject", nSubject, 1);

            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            check_greater_or_equal(function__, "nt", nt, 1);

            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "nObs", "int", context__.to_vec());
            nObs = int(0);
            vals_i__ = context__.vals_i("nObs");
            pos__ = 0;
            nObs = vals_i__[pos__++];
            check_greater_or_equal(function__, "nObs", nObs, 1);

            current_statement_begin__ = 38;
            validate_non_negative_index("iObs", "nObs", nObs);
            context__.validate_dims("data initialization", "iObs", "int", context__.to_vec(nObs));
            iObs = std::vector<int>(nObs, int(0));
            vals_i__ = context__.vals_i("iObs");
            pos__ = 0;
            size_t iObs_k_0_max__ = nObs;
            for (size_t k_0__ = 0; k_0__ < iObs_k_0_max__; ++k_0__) {
                iObs[k_0__] = vals_i__[pos__++];
            }
            size_t iObs_i_0_max__ = nObs;
            for (size_t i_0__ = 0; i_0__ < iObs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "iObs[i_0__]", iObs[i_0__], 1);
            }

            current_statement_begin__ = 39;
            validate_non_negative_index("amt", "nt", nt);
            context__.validate_dims("data initialization", "amt", "double", context__.to_vec(nt));
            amt = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("amt");
            pos__ = 0;
            size_t amt_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < amt_k_0_max__; ++k_0__) {
                amt[k_0__] = vals_r__[pos__++];
            }
            size_t amt_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < amt_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "amt[i_0__]", amt[i_0__], 0);
            }

            current_statement_begin__ = 40;
            validate_non_negative_index("cmt", "nt", nt);
            context__.validate_dims("data initialization", "cmt", "int", context__.to_vec(nt));
            cmt = std::vector<int>(nt, int(0));
            vals_i__ = context__.vals_i("cmt");
            pos__ = 0;
            size_t cmt_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < cmt_k_0_max__; ++k_0__) {
                cmt[k_0__] = vals_i__[pos__++];
            }
            size_t cmt_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < cmt_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cmt[i_0__]", cmt[i_0__], 1);
            }

            current_statement_begin__ = 41;
            validate_non_negative_index("evid", "nt", nt);
            context__.validate_dims("data initialization", "evid", "int", context__.to_vec(nt));
            evid = std::vector<int>(nt, int(0));
            vals_i__ = context__.vals_i("evid");
            pos__ = 0;
            size_t evid_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < evid_k_0_max__; ++k_0__) {
                evid[k_0__] = vals_i__[pos__++];
            }
            size_t evid_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < evid_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "evid[i_0__]", evid[i_0__], 0);
            }

            current_statement_begin__ = 42;
            validate_non_negative_index("start", "nSubject", nSubject);
            context__.validate_dims("data initialization", "start", "int", context__.to_vec(nSubject));
            start = std::vector<int>(nSubject, int(0));
            vals_i__ = context__.vals_i("start");
            pos__ = 0;
            size_t start_k_0_max__ = nSubject;
            for (size_t k_0__ = 0; k_0__ < start_k_0_max__; ++k_0__) {
                start[k_0__] = vals_i__[pos__++];
            }
            size_t start_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < start_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "start[i_0__]", start[i_0__], 1);
            }

            current_statement_begin__ = 43;
            validate_non_negative_index("end", "nSubject", nSubject);
            context__.validate_dims("data initialization", "end", "int", context__.to_vec(nSubject));
            end = std::vector<int>(nSubject, int(0));
            vals_i__ = context__.vals_i("end");
            pos__ = 0;
            size_t end_k_0_max__ = nSubject;
            for (size_t k_0__ = 0; k_0__ < end_k_0_max__; ++k_0__) {
                end[k_0__] = vals_i__[pos__++];
            }
            size_t end_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < end_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "end[i_0__]", end[i_0__], 1);
            }

            current_statement_begin__ = 44;
            validate_non_negative_index("time", "nt", nt);
            context__.validate_dims("data initialization", "time", "double", context__.to_vec(nt));
            time = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < time_k_0_max__; ++k_0__) {
                time[k_0__] = vals_r__[pos__++];
            }
            size_t time_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < time_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "time[i_0__]", time[i_0__], 0);
            }

            current_statement_begin__ = 45;
            validate_non_negative_index("cObs", "nObs", nObs);
            context__.validate_dims("data initialization", "cObs", "row_vector_d", context__.to_vec(nObs));
            cObs = Eigen::Matrix<double, 1, Eigen::Dynamic>(nObs);
            vals_r__ = context__.vals_r("cObs");
            pos__ = 0;
            size_t cObs_j_1_max__ = nObs;
            for (size_t j_1__ = 0; j_1__ < cObs_j_1_max__; ++j_1__) {
                cObs(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "cObs", cObs, 0);

            current_statement_begin__ = 46;
            validate_non_negative_index("weight", "nSubject", nSubject);
            context__.validate_dims("data initialization", "weight", "double", context__.to_vec(nSubject));
            weight = std::vector<double>(nSubject, double(0));
            vals_r__ = context__.vals_r("weight");
            pos__ = 0;
            size_t weight_k_0_max__ = nSubject;
            for (size_t k_0__ = 0; k_0__ < weight_k_0_max__; ++k_0__) {
                weight[k_0__] = vals_r__[pos__++];
            }
            size_t weight_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < weight_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "weight[i_0__]", weight[i_0__], 0);
            }

            current_statement_begin__ = 47;
            validate_non_negative_index("height", "nSubject", nSubject);
            context__.validate_dims("data initialization", "height", "double", context__.to_vec(nSubject));
            height = std::vector<double>(nSubject, double(0));
            vals_r__ = context__.vals_r("height");
            pos__ = 0;
            size_t height_k_0_max__ = nSubject;
            for (size_t k_0__ = 0; k_0__ < height_k_0_max__; ++k_0__) {
                height[k_0__] = vals_r__[pos__++];
            }
            size_t height_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < height_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "height[i_0__]", height[i_0__], 0);
            }

            current_statement_begin__ = 48;
            validate_non_negative_index("rate", "nt", nt);
            context__.validate_dims("data initialization", "rate", "double", context__.to_vec(nt));
            rate = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("rate");
            pos__ = 0;
            size_t rate_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < rate_k_0_max__; ++k_0__) {
                rate[k_0__] = vals_r__[pos__++];
            }
            size_t rate_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < rate_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "rate[i_0__]", rate[i_0__], 0);
            }

            current_statement_begin__ = 49;
            validate_non_negative_index("ii", "nt", nt);
            context__.validate_dims("data initialization", "ii", "double", context__.to_vec(nt));
            ii = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("ii");
            pos__ = 0;
            size_t ii_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < ii_k_0_max__; ++k_0__) {
                ii[k_0__] = vals_r__[pos__++];
            }
            size_t ii_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < ii_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ii[i_0__]", ii[i_0__], 0);
            }

            current_statement_begin__ = 50;
            validate_non_negative_index("addl", "nt", nt);
            context__.validate_dims("data initialization", "addl", "int", context__.to_vec(nt));
            addl = std::vector<int>(nt, int(0));
            vals_i__ = context__.vals_i("addl");
            pos__ = 0;
            size_t addl_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < addl_k_0_max__; ++k_0__) {
                addl[k_0__] = vals_i__[pos__++];
            }
            size_t addl_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < addl_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "addl[i_0__]", addl[i_0__], 0);
            }

            current_statement_begin__ = 51;
            validate_non_negative_index("ss", "nt", nt);
            context__.validate_dims("data initialization", "ss", "int", context__.to_vec(nt));
            ss = std::vector<int>(nt, int(0));
            vals_i__ = context__.vals_i("ss");
            pos__ = 0;
            size_t ss_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < ss_k_0_max__; ++k_0__) {
                ss[k_0__] = vals_i__[pos__++];
            }
            size_t ss_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < ss_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ss[i_0__]", ss[i_0__], 0);
            }

            current_statement_begin__ = 52;
            validate_non_negative_index("TC", "12", 12);
            validate_non_negative_index("TC", "5", 5);
            context__.validate_dims("data initialization", "TC", "matrix_d", context__.to_vec(12,5));
            TC = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(12, 5);
            vals_r__ = context__.vals_r("TC");
            pos__ = 0;
            size_t TC_j_2_max__ = 5;
            size_t TC_j_1_max__ = 12;
            for (size_t j_2__ = 0; j_2__ < TC_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < TC_j_1_max__; ++j_1__) {
                    TC(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "TC", TC, 0);


            // initialize transformed data variables
            current_statement_begin__ = 58;
            pKaPrior = double(0);
            stan::math::fill(pKaPrior, DUMMY_VAR__);
            stan::math::assign(pKaPrior,8.81);

            current_statement_begin__ = 59;
            fuPrior = double(0);
            stan::math::fill(fuPrior, DUMMY_VAR__);
            stan::math::assign(fuPrior,0.5);

            current_statement_begin__ = 60;
            logPPrior = double(0);
            stan::math::fill(logPPrior, DUMMY_VAR__);
            stan::math::assign(logPPrior,-(0.02));

            current_statement_begin__ = 61;
            BPPrior = double(0);
            stan::math::fill(BPPrior, DUMMY_VAR__);
            stan::math::assign(BPPrior,0.82);

            current_statement_begin__ = 65;
            VadMeanPrior = double(0);
            stan::math::fill(VadMeanPrior, DUMMY_VAR__);
            stan::math::assign(VadMeanPrior,18.2);

            current_statement_begin__ = 66;
            VarMeanPrior = double(0);
            stan::math::fill(VarMeanPrior, DUMMY_VAR__);
            stan::math::assign(VarMeanPrior,(0.295 * 5.6));

            current_statement_begin__ = 67;
            VboMeanPrior = double(0);
            stan::math::fill(VboMeanPrior, DUMMY_VAR__);
            stan::math::assign(VboMeanPrior,10.5);

            current_statement_begin__ = 68;
            VbrMeanPrior = double(0);
            stan::math::fill(VbrMeanPrior, DUMMY_VAR__);
            stan::math::assign(VbrMeanPrior,1.45);

            current_statement_begin__ = 69;
            VguMeanPrior = double(0);
            stan::math::fill(VguMeanPrior, DUMMY_VAR__);
            stan::math::assign(VguMeanPrior,0.65);

            current_statement_begin__ = 70;
            VheMeanPrior = double(0);
            stan::math::fill(VheMeanPrior, DUMMY_VAR__);
            stan::math::assign(VheMeanPrior,0.33);

            current_statement_begin__ = 71;
            VkiMeanPrior = double(0);
            stan::math::fill(VkiMeanPrior, DUMMY_VAR__);
            stan::math::assign(VkiMeanPrior,0.31);

            current_statement_begin__ = 72;
            VliMeanPrior = double(0);
            stan::math::fill(VliMeanPrior, DUMMY_VAR__);
            stan::math::assign(VliMeanPrior,1.8);

            current_statement_begin__ = 73;
            VluMeanPrior = double(0);
            stan::math::fill(VluMeanPrior, DUMMY_VAR__);
            stan::math::assign(VluMeanPrior,0.5);

            current_statement_begin__ = 74;
            VmuMeanPrior = double(0);
            stan::math::fill(VmuMeanPrior, DUMMY_VAR__);
            stan::math::assign(VmuMeanPrior,29);

            current_statement_begin__ = 75;
            VskMeanPrior = double(0);
            stan::math::fill(VskMeanPrior, DUMMY_VAR__);
            stan::math::assign(VskMeanPrior,3.3);

            current_statement_begin__ = 76;
            VspMeanPrior = double(0);
            stan::math::fill(VspMeanPrior, DUMMY_VAR__);
            stan::math::assign(VspMeanPrior,0.15);

            current_statement_begin__ = 77;
            VveMeanPrior = double(0);
            stan::math::fill(VveMeanPrior, DUMMY_VAR__);
            stan::math::assign(VveMeanPrior,(0.705 * 5.6));

            current_statement_begin__ = 80;
            VadGSDPrior = double(0);
            stan::math::fill(VadGSDPrior, DUMMY_VAR__);
            stan::math::assign(VadGSDPrior,1.65);

            current_statement_begin__ = 81;
            VarCVPrior = double(0);
            stan::math::fill(VarCVPrior, DUMMY_VAR__);
            stan::math::assign(VarCVPrior,5);

            current_statement_begin__ = 82;
            VboCVPrior = double(0);
            stan::math::fill(VboCVPrior, DUMMY_VAR__);
            stan::math::assign(VboCVPrior,1);

            current_statement_begin__ = 83;
            VbrCVPrior = double(0);
            stan::math::fill(VbrCVPrior, DUMMY_VAR__);
            stan::math::assign(VbrCVPrior,5);

            current_statement_begin__ = 84;
            VguCVPrior = double(0);
            stan::math::fill(VguCVPrior, DUMMY_VAR__);
            stan::math::assign(VguCVPrior,20);

            current_statement_begin__ = 85;
            VheCVPrior = double(0);
            stan::math::fill(VheCVPrior, DUMMY_VAR__);
            stan::math::assign(VheCVPrior,20);

            current_statement_begin__ = 86;
            VkiCVPrior = double(0);
            stan::math::fill(VkiCVPrior, DUMMY_VAR__);
            stan::math::assign(VkiCVPrior,25);

            current_statement_begin__ = 87;
            VliCVPrior = double(0);
            stan::math::fill(VliCVPrior, DUMMY_VAR__);
            stan::math::assign(VliCVPrior,23);

            current_statement_begin__ = 88;
            VluGSDPrior = double(0);
            stan::math::fill(VluGSDPrior, DUMMY_VAR__);
            stan::math::assign(VluGSDPrior,1.3);

            current_statement_begin__ = 89;
            VmuGSDPrior = double(0);
            stan::math::fill(VmuGSDPrior, DUMMY_VAR__);
            stan::math::assign(VmuGSDPrior,1.1);

            current_statement_begin__ = 90;
            VskCVPrior = double(0);
            stan::math::fill(VskCVPrior, DUMMY_VAR__);
            stan::math::assign(VskCVPrior,45);

            current_statement_begin__ = 91;
            VspGSDPrior = double(0);
            stan::math::fill(VspGSDPrior, DUMMY_VAR__);
            stan::math::assign(VspGSDPrior,1.5);

            current_statement_begin__ = 92;
            VveCVPrior = double(0);
            stan::math::fill(VveCVPrior, DUMMY_VAR__);
            stan::math::assign(VveCVPrior,5);

            current_statement_begin__ = 96;
            validate_non_negative_index("Var", "nSubject", nSubject);
            Var = std::vector<double>(nSubject, double(0));
            stan::math::fill(Var, DUMMY_VAR__);

            current_statement_begin__ = 98;
            validate_non_negative_index("Vbr", "nSubject", nSubject);
            Vbr = std::vector<double>(nSubject, double(0));
            stan::math::fill(Vbr, DUMMY_VAR__);

            current_statement_begin__ = 99;
            validate_non_negative_index("Vgu", "nSubject", nSubject);
            Vgu = std::vector<double>(nSubject, double(0));
            stan::math::fill(Vgu, DUMMY_VAR__);

            current_statement_begin__ = 100;
            validate_non_negative_index("Vhe", "nSubject", nSubject);
            Vhe = std::vector<double>(nSubject, double(0));
            stan::math::fill(Vhe, DUMMY_VAR__);

            current_statement_begin__ = 101;
            validate_non_negative_index("Vki", "nSubject", nSubject);
            Vki = std::vector<double>(nSubject, double(0));
            stan::math::fill(Vki, DUMMY_VAR__);

            current_statement_begin__ = 102;
            validate_non_negative_index("Vli", "nSubject", nSubject);
            Vli = std::vector<double>(nSubject, double(0));
            stan::math::fill(Vli, DUMMY_VAR__);

            current_statement_begin__ = 103;
            validate_non_negative_index("Vlu", "nSubject", nSubject);
            Vlu = std::vector<double>(nSubject, double(0));
            stan::math::fill(Vlu, DUMMY_VAR__);

            current_statement_begin__ = 105;
            validate_non_negative_index("Vsk", "nSubject", nSubject);
            Vsk = std::vector<double>(nSubject, double(0));
            stan::math::fill(Vsk, DUMMY_VAR__);

            current_statement_begin__ = 106;
            validate_non_negative_index("Vsp", "nSubject", nSubject);
            Vsp = std::vector<double>(nSubject, double(0));
            stan::math::fill(Vsp, DUMMY_VAR__);

            current_statement_begin__ = 107;
            validate_non_negative_index("Vve", "nSubject", nSubject);
            Vve = std::vector<double>(nSubject, double(0));
            stan::math::fill(Vve, DUMMY_VAR__);

            current_statement_begin__ = 110;
            COMeanPrior = double(0);
            stan::math::fill(COMeanPrior, DUMMY_VAR__);
            stan::math::assign(COMeanPrior,(6.5 * 60));

            current_statement_begin__ = 111;
            COCVPrior = double(0);
            stan::math::fill(COCVPrior, DUMMY_VAR__);
            stan::math::assign(COCVPrior,5);

            current_statement_begin__ = 113;
            validate_non_negative_index("Qad", "nSubject", nSubject);
            Qad = std::vector<double>(nSubject, double(0));
            stan::math::fill(Qad, DUMMY_VAR__);

            current_statement_begin__ = 114;
            validate_non_negative_index("Qbo", "nSubject", nSubject);
            Qbo = std::vector<double>(nSubject, double(0));
            stan::math::fill(Qbo, DUMMY_VAR__);

            current_statement_begin__ = 115;
            validate_non_negative_index("Qbr", "nSubject", nSubject);
            Qbr = std::vector<double>(nSubject, double(0));
            stan::math::fill(Qbr, DUMMY_VAR__);

            current_statement_begin__ = 117;
            validate_non_negative_index("Qha", "nSubject", nSubject);
            Qha = std::vector<double>(nSubject, double(0));
            stan::math::fill(Qha, DUMMY_VAR__);

            current_statement_begin__ = 118;
            validate_non_negative_index("Qhe", "nSubject", nSubject);
            Qhe = std::vector<double>(nSubject, double(0));
            stan::math::fill(Qhe, DUMMY_VAR__);

            current_statement_begin__ = 122;
            validate_non_negative_index("Qmu", "nSubject", nSubject);
            Qmu = std::vector<double>(nSubject, double(0));
            stan::math::fill(Qmu, DUMMY_VAR__);

            current_statement_begin__ = 123;
            validate_non_negative_index("Qsk", "nSubject", nSubject);
            Qsk = std::vector<double>(nSubject, double(0));
            stan::math::fill(Qsk, DUMMY_VAR__);

            current_statement_begin__ = 124;
            validate_non_negative_index("Qsp", "nSubject", nSubject);
            Qsp = std::vector<double>(nSubject, double(0));
            stan::math::fill(Qsp, DUMMY_VAR__);

            current_statement_begin__ = 127;
            CLhepaticPrior = double(0);
            stan::math::fill(CLhepaticPrior, DUMMY_VAR__);
            stan::math::assign(CLhepaticPrior,((0.009 * VliMeanPrior) * 60));

            current_statement_begin__ = 128;
            CLrenalPrior = double(0);
            stan::math::fill(CLrenalPrior, DUMMY_VAR__);
            stan::math::assign(CLrenalPrior,((0.0317 * VkiMeanPrior) * 60));

            current_statement_begin__ = 131;
            VmuUpper = double(0);
            stan::math::fill(VmuUpper, DUMMY_VAR__);
            stan::math::assign(VmuUpper,stan::math::exp((stan::math::log(VmuMeanPrior) + (2 * stan::math::log(VmuGSDPrior)))));

            current_statement_begin__ = 132;
            VmuLower = double(0);
            stan::math::fill(VmuLower, DUMMY_VAR__);
            stan::math::assign(VmuLower,stan::math::exp((stan::math::log(VmuMeanPrior) - (2 * stan::math::log(VmuGSDPrior)))));

            current_statement_begin__ = 133;
            VboUpper = double(0);
            stan::math::fill(VboUpper, DUMMY_VAR__);
            stan::math::assign(VboUpper,(VboMeanPrior + (2 * ((VboCVPrior * VboMeanPrior) / 100))));

            current_statement_begin__ = 134;
            VboLower = double(0);
            stan::math::fill(VboLower, DUMMY_VAR__);
            stan::math::assign(VboLower,(VboMeanPrior - (2 * ((VboCVPrior * VboMeanPrior) / 100))));

            current_statement_begin__ = 135;
            QguUpper = double(0);
            stan::math::fill(QguUpper, DUMMY_VAR__);
            stan::math::assign(QguUpper,((0.16 * COMeanPrior) + (2 * (((5 * 0.16) * COMeanPrior) / 100))));

            current_statement_begin__ = 136;
            QguLower = double(0);
            stan::math::fill(QguLower, DUMMY_VAR__);
            stan::math::assign(QguLower,((0.16 * COMeanPrior) - (2 * (((5 * 0.16) * COMeanPrior) / 100))));

            current_statement_begin__ = 137;
            QkiUpper = double(0);
            stan::math::fill(QkiUpper, DUMMY_VAR__);
            stan::math::assign(QkiUpper,((0.19 * COMeanPrior) + (2 * (((5 * 0.19) * COMeanPrior) / 100))));

            current_statement_begin__ = 138;
            QkiLower = double(0);
            stan::math::fill(QkiLower, DUMMY_VAR__);
            stan::math::assign(QkiLower,((0.19 * COMeanPrior) - (2 * (((5 * 0.19) * COMeanPrior) / 100))));

            current_statement_begin__ = 141;
            fuUpper = double(0);
            stan::math::fill(fuUpper, DUMMY_VAR__);
            stan::math::assign(fuUpper,1);

            current_statement_begin__ = 142;
            fuLower = double(0);
            stan::math::fill(fuLower, DUMMY_VAR__);
            stan::math::assign(fuLower,0);

            current_statement_begin__ = 143;
            CLhepaticUpper = double(0);
            stan::math::fill(CLhepaticUpper, DUMMY_VAR__);
            stan::math::assign(CLhepaticUpper,(CLhepaticPrior * 100));

            current_statement_begin__ = 144;
            CLhepaticLower = double(0);
            stan::math::fill(CLhepaticLower, DUMMY_VAR__);
            stan::math::assign(CLhepaticLower,(CLhepaticPrior / 100));

            current_statement_begin__ = 148;
            nRandom = int(0);
            stan::math::fill(nRandom, std::numeric_limits<int>::min());
            stan::math::assign(nRandom,6);

            current_statement_begin__ = 149;
            nParms = int(0);
            stan::math::fill(nParms, std::numeric_limits<int>::min());
            stan::math::assign(nParms,7);

            current_statement_begin__ = 150;
            nCmt = int(0);
            stan::math::fill(nCmt, std::numeric_limits<int>::min());
            stan::math::assign(nCmt,14);

            current_statement_begin__ = 151;
            nOrgans = int(0);
            stan::math::fill(nOrgans, std::numeric_limits<int>::min());
            stan::math::assign(nOrgans,11);

            current_statement_begin__ = 152;
            validate_non_negative_index("F", "nCmt", nCmt);
            F = std::vector<double>(nCmt, double(0));
            stan::math::fill(F, DUMMY_VAR__);

            current_statement_begin__ = 153;
            validate_non_negative_index("tlag", "nCmt", nCmt);
            tlag = std::vector<double>(nCmt, double(0));
            stan::math::fill(tlag, DUMMY_VAR__);

            // execute transformed data statements
            current_statement_begin__ = 155;
            for (int i = 1; i <= nCmt; ++i) {

                current_statement_begin__ = 156;
                stan::model::assign(F, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            1, 
                            "assigning variable F");
                current_statement_begin__ = 157;
                stan::model::assign(tlag, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable tlag");
            }
            current_statement_begin__ = 161;
            for (int j = 1; j <= nSubject; ++j) {

                current_statement_begin__ = 163;
                stan::model::assign(Var, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (VarMeanPrior * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Var");
                current_statement_begin__ = 165;
                stan::model::assign(Vbr, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (VbrMeanPrior * pow((get_base1(height, j, "height", 1) / 1.76), 0)), 
                            "assigning variable Vbr");
                current_statement_begin__ = 166;
                stan::model::assign(Vgu, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (VguMeanPrior * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Vgu");
                current_statement_begin__ = 167;
                stan::model::assign(Vhe, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (VheMeanPrior * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Vhe");
                current_statement_begin__ = 168;
                stan::model::assign(Vki, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (VkiMeanPrior * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Vki");
                current_statement_begin__ = 169;
                stan::model::assign(Vli, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (VliMeanPrior * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Vli");
                current_statement_begin__ = 170;
                stan::model::assign(Vlu, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (VluMeanPrior * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Vlu");
                current_statement_begin__ = 172;
                stan::model::assign(Vsk, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (VskMeanPrior * pow((get_base1(height, j, "height", 1) / 1.76), 1.6)), 
                            "assigning variable Vsk");
                current_statement_begin__ = 173;
                stan::model::assign(Vsp, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (VspMeanPrior * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Vsp");
                current_statement_begin__ = 174;
                stan::model::assign(Vve, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (VveMeanPrior * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Vve");
                current_statement_begin__ = 176;
                stan::model::assign(Qad, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            ((0.05 * COMeanPrior) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Qad");
                current_statement_begin__ = 177;
                stan::model::assign(Qbo, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            ((0.05 * COMeanPrior) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Qbo");
                current_statement_begin__ = 178;
                stan::model::assign(Qbr, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            ((0.12 * COMeanPrior) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Qbr");
                current_statement_begin__ = 180;
                stan::model::assign(Qhe, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            ((0.04 * COMeanPrior) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Qhe");
                current_statement_begin__ = 182;
                stan::model::assign(Qmu, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            ((0.05 * COMeanPrior) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Qmu");
                current_statement_begin__ = 183;
                stan::model::assign(Qsk, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            ((0.05 * COMeanPrior) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Qsk");
                current_statement_begin__ = 184;
                stan::model::assign(Qsp, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            ((0.03 * COMeanPrior) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Qsp");
                current_statement_begin__ = 185;
                stan::model::assign(Qha, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            ((0.065 * COMeanPrior) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Qha");
            }

            // validate transformed data
            current_statement_begin__ = 65;
            check_greater_or_equal(function__, "VadMeanPrior", VadMeanPrior, 0);

            current_statement_begin__ = 66;
            check_greater_or_equal(function__, "VarMeanPrior", VarMeanPrior, 0);

            current_statement_begin__ = 67;
            check_greater_or_equal(function__, "VboMeanPrior", VboMeanPrior, 0);

            current_statement_begin__ = 68;
            check_greater_or_equal(function__, "VbrMeanPrior", VbrMeanPrior, 0);

            current_statement_begin__ = 69;
            check_greater_or_equal(function__, "VguMeanPrior", VguMeanPrior, 0);

            current_statement_begin__ = 70;
            check_greater_or_equal(function__, "VheMeanPrior", VheMeanPrior, 0);

            current_statement_begin__ = 71;
            check_greater_or_equal(function__, "VkiMeanPrior", VkiMeanPrior, 0);

            current_statement_begin__ = 72;
            check_greater_or_equal(function__, "VliMeanPrior", VliMeanPrior, 0);

            current_statement_begin__ = 73;
            check_greater_or_equal(function__, "VluMeanPrior", VluMeanPrior, 0);

            current_statement_begin__ = 74;
            check_greater_or_equal(function__, "VmuMeanPrior", VmuMeanPrior, 0);

            current_statement_begin__ = 75;
            check_greater_or_equal(function__, "VskMeanPrior", VskMeanPrior, 0);

            current_statement_begin__ = 76;
            check_greater_or_equal(function__, "VspMeanPrior", VspMeanPrior, 0);

            current_statement_begin__ = 77;
            check_greater_or_equal(function__, "VveMeanPrior", VveMeanPrior, 0);

            current_statement_begin__ = 80;
            check_greater_or_equal(function__, "VadGSDPrior", VadGSDPrior, 0);

            current_statement_begin__ = 81;
            check_greater_or_equal(function__, "VarCVPrior", VarCVPrior, 0);

            current_statement_begin__ = 82;
            check_greater_or_equal(function__, "VboCVPrior", VboCVPrior, 0);

            current_statement_begin__ = 83;
            check_greater_or_equal(function__, "VbrCVPrior", VbrCVPrior, 0);

            current_statement_begin__ = 84;
            check_greater_or_equal(function__, "VguCVPrior", VguCVPrior, 0);

            current_statement_begin__ = 85;
            check_greater_or_equal(function__, "VheCVPrior", VheCVPrior, 0);

            current_statement_begin__ = 86;
            check_greater_or_equal(function__, "VkiCVPrior", VkiCVPrior, 0);

            current_statement_begin__ = 87;
            check_greater_or_equal(function__, "VliCVPrior", VliCVPrior, 0);

            current_statement_begin__ = 88;
            check_greater_or_equal(function__, "VluGSDPrior", VluGSDPrior, 0);

            current_statement_begin__ = 89;
            check_greater_or_equal(function__, "VmuGSDPrior", VmuGSDPrior, 0);

            current_statement_begin__ = 90;
            check_greater_or_equal(function__, "VskCVPrior", VskCVPrior, 0);

            current_statement_begin__ = 91;
            check_greater_or_equal(function__, "VspGSDPrior", VspGSDPrior, 0);

            current_statement_begin__ = 92;
            check_greater_or_equal(function__, "VveCVPrior", VveCVPrior, 0);

            current_statement_begin__ = 96;
            size_t Var_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Var_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Var[i_0__]", Var[i_0__], 0);
            }

            current_statement_begin__ = 98;
            size_t Vbr_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Vbr_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Vbr[i_0__]", Vbr[i_0__], 0);
            }

            current_statement_begin__ = 99;
            size_t Vgu_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Vgu_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Vgu[i_0__]", Vgu[i_0__], 0);
            }

            current_statement_begin__ = 100;
            size_t Vhe_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Vhe_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Vhe[i_0__]", Vhe[i_0__], 0);
            }

            current_statement_begin__ = 101;
            size_t Vki_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Vki_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Vki[i_0__]", Vki[i_0__], 0);
            }

            current_statement_begin__ = 102;
            size_t Vli_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Vli_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Vli[i_0__]", Vli[i_0__], 0);
            }

            current_statement_begin__ = 103;
            size_t Vlu_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Vlu_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Vlu[i_0__]", Vlu[i_0__], 0);
            }

            current_statement_begin__ = 105;
            size_t Vsk_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Vsk_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Vsk[i_0__]", Vsk[i_0__], 0);
            }

            current_statement_begin__ = 106;
            size_t Vsp_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Vsp_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Vsp[i_0__]", Vsp[i_0__], 0);
            }

            current_statement_begin__ = 107;
            size_t Vve_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Vve_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Vve[i_0__]", Vve[i_0__], 0);
            }

            current_statement_begin__ = 110;
            check_greater_or_equal(function__, "COMeanPrior", COMeanPrior, 0);

            current_statement_begin__ = 111;
            check_greater_or_equal(function__, "COCVPrior", COCVPrior, 0);

            current_statement_begin__ = 113;
            size_t Qad_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Qad_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Qad[i_0__]", Qad[i_0__], 0);
            }

            current_statement_begin__ = 114;
            size_t Qbo_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Qbo_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Qbo[i_0__]", Qbo[i_0__], 0);
            }

            current_statement_begin__ = 115;
            size_t Qbr_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Qbr_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Qbr[i_0__]", Qbr[i_0__], 0);
            }

            current_statement_begin__ = 117;
            size_t Qha_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Qha_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Qha[i_0__]", Qha[i_0__], 0);
            }

            current_statement_begin__ = 118;
            size_t Qhe_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Qhe_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Qhe[i_0__]", Qhe[i_0__], 0);
            }

            current_statement_begin__ = 122;
            size_t Qmu_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Qmu_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Qmu[i_0__]", Qmu[i_0__], 0);
            }

            current_statement_begin__ = 123;
            size_t Qsk_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Qsk_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Qsk[i_0__]", Qsk[i_0__], 0);
            }

            current_statement_begin__ = 124;
            size_t Qsp_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Qsp_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Qsp[i_0__]", Qsp[i_0__], 0);
            }

            current_statement_begin__ = 148;
            check_greater_or_equal(function__, "nRandom", nRandom, 1);

            current_statement_begin__ = 149;
            check_greater_or_equal(function__, "nParms", nParms, 1);


            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 194;
            num_params_r__ += 1;
            current_statement_begin__ = 195;
            num_params_r__ += 1;
            current_statement_begin__ = 196;
            num_params_r__ += 1;
            current_statement_begin__ = 197;
            num_params_r__ += 1;
            current_statement_begin__ = 198;
            num_params_r__ += 1;
            current_statement_begin__ = 199;
            num_params_r__ += 1;
            current_statement_begin__ = 203;
            num_params_r__ += 1;
            current_statement_begin__ = 206;
            validate_non_negative_index("omega", "nRandom", nRandom);
            num_params_r__ += nRandom;
            current_statement_begin__ = 207;
            validate_non_negative_index("L", "nRandom", nRandom);
            validate_non_negative_index("L", "nRandom", nRandom);
            num_params_r__ += ((nRandom * (nRandom - 1)) / 2);
            current_statement_begin__ = 208;
            validate_non_negative_index("eta", "nRandom", nRandom);
            validate_non_negative_index("eta", "nSubject", nSubject);
            num_params_r__ += (nRandom * nSubject);
            current_statement_begin__ = 211;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~theophLinPBPK1_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 194;
        if (!(context__.contains_r("VboHat")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable VboHat missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("VboHat");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "VboHat", "double", context__.to_vec());
        double VboHat(0);
        VboHat = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(VboLower, VboUpper, VboHat);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable VboHat: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 195;
        if (!(context__.contains_r("VmuHat")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable VmuHat missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("VmuHat");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "VmuHat", "double", context__.to_vec());
        double VmuHat(0);
        VmuHat = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(VmuLower, VmuUpper, VmuHat);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable VmuHat: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 196;
        if (!(context__.contains_r("QguHat")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable QguHat missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("QguHat");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "QguHat", "double", context__.to_vec());
        double QguHat(0);
        QguHat = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(QguLower, QguUpper, QguHat);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable QguHat: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 197;
        if (!(context__.contains_r("QkiHat")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable QkiHat missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("QkiHat");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "QkiHat", "double", context__.to_vec());
        double QkiHat(0);
        QkiHat = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(QkiLower, QkiUpper, QkiHat);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable QkiHat: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 198;
        if (!(context__.contains_r("CLhepaticHat")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable CLhepaticHat missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("CLhepaticHat");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "CLhepaticHat", "double", context__.to_vec());
        double CLhepaticHat(0);
        CLhepaticHat = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(CLhepaticLower, CLhepaticUpper, CLhepaticHat);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable CLhepaticHat: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 199;
        if (!(context__.contains_r("kaHat")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable kaHat missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("kaHat");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "kaHat", "double", context__.to_vec());
        double kaHat(0);
        kaHat = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, kaHat);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable kaHat: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 203;
        if (!(context__.contains_r("fu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable fu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("fu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "fu", "double", context__.to_vec());
        double fu(0);
        fu = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(fuLower, fuUpper, fu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable fu: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 206;
        if (!(context__.contains_r("omega")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable omega missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("omega");
        pos__ = 0U;
        validate_non_negative_index("omega", "nRandom", nRandom);
        context__.validate_dims("parameter initialization", "omega", "vector_d", context__.to_vec(nRandom));
        Eigen::Matrix<double, Eigen::Dynamic, 1> omega(nRandom);
        size_t omega_j_1_max__ = nRandom;
        for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
            omega(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, omega);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable omega: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 207;
        if (!(context__.contains_r("L")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L");
        pos__ = 0U;
        validate_non_negative_index("L", "nRandom", nRandom);
        validate_non_negative_index("L", "nRandom", nRandom);
        context__.validate_dims("parameter initialization", "L", "matrix_d", context__.to_vec(nRandom,nRandom));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L(nRandom, nRandom);
        size_t L_j_2_max__ = nRandom;
        size_t L_j_1_max__ = nRandom;
        for (size_t j_2__ = 0; j_2__ < L_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
                L(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 208;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "nRandom", nRandom);
        validate_non_negative_index("eta", "nSubject", nSubject);
        context__.validate_dims("parameter initialization", "eta", "matrix_d", context__.to_vec(nRandom,nSubject));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> eta(nRandom, nSubject);
        size_t eta_j_2_max__ = nSubject;
        size_t eta_j_1_max__ = nRandom;
        for (size_t j_2__ = 0; j_2__ < eta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                eta(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 211;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 194;
            local_scalar_t__ VboHat;
            (void) VboHat;  // dummy to suppress unused var warning
            if (jacobian__)
                VboHat = in__.scalar_lub_constrain(VboLower, VboUpper, lp__);
            else
                VboHat = in__.scalar_lub_constrain(VboLower, VboUpper);

            current_statement_begin__ = 195;
            local_scalar_t__ VmuHat;
            (void) VmuHat;  // dummy to suppress unused var warning
            if (jacobian__)
                VmuHat = in__.scalar_lub_constrain(VmuLower, VmuUpper, lp__);
            else
                VmuHat = in__.scalar_lub_constrain(VmuLower, VmuUpper);

            current_statement_begin__ = 196;
            local_scalar_t__ QguHat;
            (void) QguHat;  // dummy to suppress unused var warning
            if (jacobian__)
                QguHat = in__.scalar_lub_constrain(QguLower, QguUpper, lp__);
            else
                QguHat = in__.scalar_lub_constrain(QguLower, QguUpper);

            current_statement_begin__ = 197;
            local_scalar_t__ QkiHat;
            (void) QkiHat;  // dummy to suppress unused var warning
            if (jacobian__)
                QkiHat = in__.scalar_lub_constrain(QkiLower, QkiUpper, lp__);
            else
                QkiHat = in__.scalar_lub_constrain(QkiLower, QkiUpper);

            current_statement_begin__ = 198;
            local_scalar_t__ CLhepaticHat;
            (void) CLhepaticHat;  // dummy to suppress unused var warning
            if (jacobian__)
                CLhepaticHat = in__.scalar_lub_constrain(CLhepaticLower, CLhepaticUpper, lp__);
            else
                CLhepaticHat = in__.scalar_lub_constrain(CLhepaticLower, CLhepaticUpper);

            current_statement_begin__ = 199;
            local_scalar_t__ kaHat;
            (void) kaHat;  // dummy to suppress unused var warning
            if (jacobian__)
                kaHat = in__.scalar_lb_constrain(0, lp__);
            else
                kaHat = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 203;
            local_scalar_t__ fu;
            (void) fu;  // dummy to suppress unused var warning
            if (jacobian__)
                fu = in__.scalar_lub_constrain(fuLower, fuUpper, lp__);
            else
                fu = in__.scalar_lub_constrain(fuLower, fuUpper);

            current_statement_begin__ = 206;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> omega;
            (void) omega;  // dummy to suppress unused var warning
            if (jacobian__)
                omega = in__.vector_lb_constrain(0, nRandom, lp__);
            else
                omega = in__.vector_lb_constrain(0, nRandom);

            current_statement_begin__ = 207;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L;
            (void) L;  // dummy to suppress unused var warning
            if (jacobian__)
                L = in__.cholesky_factor_corr_constrain(nRandom, lp__);
            else
                L = in__.cholesky_factor_corr_constrain(nRandom);

            current_statement_begin__ = 208;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.matrix_constrain(nRandom, nSubject, lp__);
            else
                eta = in__.matrix_constrain(nRandom, nSubject);

            current_statement_begin__ = 211;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);

            // transformed parameters
            current_statement_begin__ = 217;
            validate_non_negative_index("thetaHat", "nRandom", nRandom);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> thetaHat(nRandom);
            stan::math::initialize(thetaHat, DUMMY_VAR__);
            stan::math::fill(thetaHat, DUMMY_VAR__);

            current_statement_begin__ = 220;
            validate_non_negative_index("theta", "nSubject", nSubject);
            validate_non_negative_index("theta", "nRandom", nRandom);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> theta(nSubject, nRandom);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);

            current_statement_begin__ = 223;
            validate_non_negative_index("K", "nCmt", nCmt);
            validate_non_negative_index("K", "nCmt", nCmt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(nCmt, nCmt);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);

            current_statement_begin__ = 224;
            validate_non_negative_index("cHat", "nt", nt);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> cHat(nt);
            stan::math::initialize(cHat, DUMMY_VAR__);
            stan::math::fill(cHat, DUMMY_VAR__);

            current_statement_begin__ = 225;
            validate_non_negative_index("x", "nCmt", nCmt);
            validate_non_negative_index("x", "nt", nt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> x(nCmt, nt);
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);

            current_statement_begin__ = 228;
            validate_non_negative_index("Vbo", "nSubject", nSubject);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> Vbo(nSubject);
            stan::math::initialize(Vbo, DUMMY_VAR__);
            stan::math::fill(Vbo, DUMMY_VAR__);

            current_statement_begin__ = 229;
            validate_non_negative_index("Vmu", "nSubject", nSubject);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> Vmu(nSubject);
            stan::math::initialize(Vmu, DUMMY_VAR__);
            stan::math::fill(Vmu, DUMMY_VAR__);

            current_statement_begin__ = 230;
            validate_non_negative_index("Qgu", "nSubject", nSubject);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> Qgu(nSubject);
            stan::math::initialize(Qgu, DUMMY_VAR__);
            stan::math::fill(Qgu, DUMMY_VAR__);

            current_statement_begin__ = 231;
            validate_non_negative_index("Qki", "nSubject", nSubject);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> Qki(nSubject);
            stan::math::initialize(Qki, DUMMY_VAR__);
            stan::math::fill(Qki, DUMMY_VAR__);

            current_statement_begin__ = 232;
            validate_non_negative_index("CLhepatic", "nSubject", nSubject);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> CLhepatic(nSubject);
            stan::math::initialize(CLhepatic, DUMMY_VAR__);
            stan::math::fill(CLhepatic, DUMMY_VAR__);

            current_statement_begin__ = 233;
            validate_non_negative_index("ka", "nSubject", nSubject);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> ka(nSubject);
            stan::math::initialize(ka, DUMMY_VAR__);
            stan::math::fill(ka, DUMMY_VAR__);

            current_statement_begin__ = 235;
            validate_non_negative_index("Vad", "nSubject", nSubject);
            std::vector<local_scalar_t__> Vad(nSubject, local_scalar_t__(0));
            stan::math::initialize(Vad, DUMMY_VAR__);
            stan::math::fill(Vad, DUMMY_VAR__);

            current_statement_begin__ = 236;
            validate_non_negative_index("Qli", "nSubject", nSubject);
            std::vector<local_scalar_t__> Qli(nSubject, local_scalar_t__(0));
            stan::math::initialize(Qli, DUMMY_VAR__);
            stan::math::fill(Qli, DUMMY_VAR__);

            current_statement_begin__ = 237;
            validate_non_negative_index("Qlu", "nSubject", nSubject);
            std::vector<local_scalar_t__> Qlu(nSubject, local_scalar_t__(0));
            stan::math::initialize(Qlu, DUMMY_VAR__);
            stan::math::fill(Qlu, DUMMY_VAR__);

            current_statement_begin__ = 240;
            local_scalar_t__ CLrenal;
            (void) CLrenal;  // dummy to suppress unused var warning
            stan::math::initialize(CLrenal, DUMMY_VAR__);
            stan::math::fill(CLrenal, DUMMY_VAR__);
            stan::math::assign(CLrenal,CLrenalPrior);

            current_statement_begin__ = 241;
            local_scalar_t__ pKa;
            (void) pKa;  // dummy to suppress unused var warning
            stan::math::initialize(pKa, DUMMY_VAR__);
            stan::math::fill(pKa, DUMMY_VAR__);
            stan::math::assign(pKa,pKaPrior);

            current_statement_begin__ = 243;
            local_scalar_t__ logP;
            (void) logP;  // dummy to suppress unused var warning
            stan::math::initialize(logP, DUMMY_VAR__);
            stan::math::fill(logP, DUMMY_VAR__);
            stan::math::assign(logP,logPPrior);

            current_statement_begin__ = 244;
            local_scalar_t__ BP;
            (void) BP;  // dummy to suppress unused var warning
            stan::math::initialize(BP, DUMMY_VAR__);
            stan::math::fill(BP, DUMMY_VAR__);
            stan::math::assign(BP,BPPrior);

            current_statement_begin__ = 245;
            validate_non_negative_index("Kp", "nOrgans", nOrgans);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Kp(nOrgans);
            stan::math::initialize(Kp, DUMMY_VAR__);
            stan::math::fill(Kp, DUMMY_VAR__);

            current_statement_begin__ = 246;
            local_scalar_t__ Kpad;
            (void) Kpad;  // dummy to suppress unused var warning
            stan::math::initialize(Kpad, DUMMY_VAR__);
            stan::math::fill(Kpad, DUMMY_VAR__);

            current_statement_begin__ = 247;
            local_scalar_t__ Kpbo;
            (void) Kpbo;  // dummy to suppress unused var warning
            stan::math::initialize(Kpbo, DUMMY_VAR__);
            stan::math::fill(Kpbo, DUMMY_VAR__);

            current_statement_begin__ = 248;
            local_scalar_t__ Kpbr;
            (void) Kpbr;  // dummy to suppress unused var warning
            stan::math::initialize(Kpbr, DUMMY_VAR__);
            stan::math::fill(Kpbr, DUMMY_VAR__);

            current_statement_begin__ = 249;
            local_scalar_t__ Kpgu;
            (void) Kpgu;  // dummy to suppress unused var warning
            stan::math::initialize(Kpgu, DUMMY_VAR__);
            stan::math::fill(Kpgu, DUMMY_VAR__);

            current_statement_begin__ = 250;
            local_scalar_t__ Kphe;
            (void) Kphe;  // dummy to suppress unused var warning
            stan::math::initialize(Kphe, DUMMY_VAR__);
            stan::math::fill(Kphe, DUMMY_VAR__);

            current_statement_begin__ = 251;
            local_scalar_t__ Kpki;
            (void) Kpki;  // dummy to suppress unused var warning
            stan::math::initialize(Kpki, DUMMY_VAR__);
            stan::math::fill(Kpki, DUMMY_VAR__);

            current_statement_begin__ = 252;
            local_scalar_t__ Kpli;
            (void) Kpli;  // dummy to suppress unused var warning
            stan::math::initialize(Kpli, DUMMY_VAR__);
            stan::math::fill(Kpli, DUMMY_VAR__);

            current_statement_begin__ = 253;
            local_scalar_t__ Kplu;
            (void) Kplu;  // dummy to suppress unused var warning
            stan::math::initialize(Kplu, DUMMY_VAR__);
            stan::math::fill(Kplu, DUMMY_VAR__);

            current_statement_begin__ = 254;
            local_scalar_t__ Kpmu;
            (void) Kpmu;  // dummy to suppress unused var warning
            stan::math::initialize(Kpmu, DUMMY_VAR__);
            stan::math::fill(Kpmu, DUMMY_VAR__);

            current_statement_begin__ = 255;
            local_scalar_t__ Kpsk;
            (void) Kpsk;  // dummy to suppress unused var warning
            stan::math::initialize(Kpsk, DUMMY_VAR__);
            stan::math::fill(Kpsk, DUMMY_VAR__);

            current_statement_begin__ = 256;
            local_scalar_t__ Kpsp;
            (void) Kpsp;  // dummy to suppress unused var warning
            stan::math::initialize(Kpsp, DUMMY_VAR__);
            stan::math::fill(Kpsp, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 258;
            stan::math::assign(Kp, calcKpPT(logP, pKa, fu, BP, TC, pstream__));
            current_statement_begin__ = 259;
            stan::math::assign(Kpad, get_base1(Kp, 1, "Kp", 1));
            current_statement_begin__ = 260;
            stan::math::assign(Kpbo, get_base1(Kp, 2, "Kp", 1));
            current_statement_begin__ = 261;
            stan::math::assign(Kpbr, get_base1(Kp, 3, "Kp", 1));
            current_statement_begin__ = 262;
            stan::math::assign(Kpgu, get_base1(Kp, 4, "Kp", 1));
            current_statement_begin__ = 263;
            stan::math::assign(Kphe, get_base1(Kp, 5, "Kp", 1));
            current_statement_begin__ = 264;
            stan::math::assign(Kpki, get_base1(Kp, 6, "Kp", 1));
            current_statement_begin__ = 265;
            stan::math::assign(Kpli, get_base1(Kp, 7, "Kp", 1));
            current_statement_begin__ = 266;
            stan::math::assign(Kplu, get_base1(Kp, 8, "Kp", 1));
            current_statement_begin__ = 267;
            stan::math::assign(Kpmu, get_base1(Kp, 9, "Kp", 1));
            current_statement_begin__ = 268;
            stan::math::assign(Kpsk, get_base1(Kp, 11, "Kp", 1));
            current_statement_begin__ = 269;
            stan::math::assign(Kpsp, get_base1(Kp, 10, "Kp", 1));
            current_statement_begin__ = 271;
            stan::model::assign(thetaHat, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        VmuHat, 
                        "assigning variable thetaHat");
            current_statement_begin__ = 272;
            stan::model::assign(thetaHat, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        VboHat, 
                        "assigning variable thetaHat");
            current_statement_begin__ = 273;
            stan::model::assign(thetaHat, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        QguHat, 
                        "assigning variable thetaHat");
            current_statement_begin__ = 274;
            stan::model::assign(thetaHat, 
                        stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                        QkiHat, 
                        "assigning variable thetaHat");
            current_statement_begin__ = 275;
            stan::model::assign(thetaHat, 
                        stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                        CLhepaticHat, 
                        "assigning variable thetaHat");
            current_statement_begin__ = 276;
            stan::model::assign(thetaHat, 
                        stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                        kaHat, 
                        "assigning variable thetaHat");
            current_statement_begin__ = 278;
            stan::math::assign(theta, transpose(elt_multiply(rep_matrix(thetaHat, nSubject), stan::math::exp(diag_pre_multiply(omega, multiply(L, eta))))));
            current_statement_begin__ = 281;
            for (int j = 1; j <= nSubject; ++j) {

                current_statement_begin__ = 283;
                stan::model::assign(Vmu, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(theta, j, 1, "theta", 1) * pow((get_base1(height, j, "height", 1) / 1.76), 2)), 
                            "assigning variable Vmu");
                current_statement_begin__ = 284;
                stan::model::assign(Vbo, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(theta, j, 2, "theta", 1) * pow((get_base1(height, j, "height", 1) / 1.76), 2)), 
                            "assigning variable Vbo");
                current_statement_begin__ = 285;
                stan::model::assign(Qgu, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(theta, j, 3, "theta", 1) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Qgu");
                current_statement_begin__ = 286;
                stan::model::assign(Qki, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(theta, j, 4, "theta", 1) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Qki");
                current_statement_begin__ = 287;
                stan::model::assign(CLhepatic, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            get_base1(theta, j, 5, "theta", 1), 
                            "assigning variable CLhepatic");
                current_statement_begin__ = 288;
                stan::model::assign(ka, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            get_base1(theta, j, 6, "theta", 1), 
                            "assigning variable ka");
                current_statement_begin__ = 291;
                stan::model::assign(Vad, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(weight, j, "weight", 1) - (((((((((((get_base1(Var, j, "Var", 1) + get_base1(Vbo, j, "Vbo", 1)) + get_base1(Vbr, j, "Vbr", 1)) + get_base1(Vgu, j, "Vgu", 1)) + get_base1(Vhe, j, "Vhe", 1)) + get_base1(Vki, j, "Vki", 1)) + get_base1(Vli, j, "Vli", 1)) + get_base1(Vlu, j, "Vlu", 1)) + get_base1(Vmu, j, "Vmu", 1)) + get_base1(Vsk, j, "Vsk", 1)) + get_base1(Vsp, j, "Vsp", 1)) + get_base1(Vve, j, "Vve", 1))), 
                            "assigning variable Vad");
                current_statement_begin__ = 292;
                stan::model::assign(Qli, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            ((get_base1(Qsp, j, "Qsp", 1) + get_base1(Qgu, j, "Qgu", 1)) + get_base1(Qha, j, "Qha", 1)), 
                            "assigning variable Qli");
                current_statement_begin__ = 293;
                stan::model::assign(Qlu, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (((((((get_base1(Qad, j, "Qad", 1) + get_base1(Qbo, j, "Qbo", 1)) + get_base1(Qbr, j, "Qbr", 1)) + get_base1(Qhe, j, "Qhe", 1)) + get_base1(Qki, j, "Qki", 1)) + get_base1(Qli, j, "Qli", 1)) + get_base1(Qmu, j, "Qmu", 1)) + get_base1(Qsk, j, "Qsk", 1)), 
                            "assigning variable Qlu");
                current_statement_begin__ = 296;
                stan::math::assign(K, rep_matrix(0, nCmt, nCmt));
                current_statement_begin__ = 298;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            ((-(get_base1(Qad, j, "Qad", 1)) / get_base1(Vad, j, "Vad", 1)) / (Kpad / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 299;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qad, j, "Qad", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 300;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (-(get_base1(Qlu, j, "Qlu", 1)) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 301;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list())), 
                            ((get_base1(Qlu, j, "Qlu", 1) / get_base1(Vlu, j, "Vlu", 1)) / (Kplu / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 302;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qbo, j, "Qbo", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 303;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                            ((-(get_base1(Qbo, j, "Qbo", 1)) / get_base1(Vbo, j, "Vbo", 1)) / (Kpbo / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 304;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(4), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qbr, j, "Qbr", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 305;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(4), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                            ((-(get_base1(Qbr, j, "Qbr", 1)) / get_base1(Vbr, j, "Vbr", 1)) / (Kpbr / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 306;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(5), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                            -(get_base1(ka, j, "ka", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 307;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(6), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qgu, j, "Qgu", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 308;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(6), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                            get_base1(ka, j, "ka", 1), 
                            "assigning variable K");
                current_statement_begin__ = 309;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(6), stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list())), 
                            ((-(get_base1(Qgu, j, "Qgu", 1)) / get_base1(Vgu, j, "Vgu", 1)) / (Kpgu / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 310;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(7), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qhe, j, "Qhe", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 311;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(7), stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list())), 
                            ((-(get_base1(Qhe, j, "Qhe", 1)) / get_base1(Vhe, j, "Vhe", 1)) / (Kphe / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 312;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(8), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qki, j, "Qki", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 313;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(8), stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list())), 
                            ((-((get_base1(Qki, j, "Qki", 1) + (fu * CLrenal))) / get_base1(Vki, j, "Vki", 1)) / (Kpki / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 314;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(9), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qha, j, "Qha", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 315;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(9), stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list())), 
                            ((get_base1(Qgu, j, "Qgu", 1) / get_base1(Vgu, j, "Vgu", 1)) / (Kpgu / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 316;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(9), stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list())), 
                            ((-((get_base1(Qli, j, "Qli", 1) + (fu * get_base1(CLhepatic, j, "CLhepatic", 1)))) / get_base1(Vli, j, "Vli", 1)) / (Kpli / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 317;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(9), stan::model::cons_list(stan::model::index_uni(13), stan::model::nil_index_list())), 
                            ((get_base1(Qsp, j, "Qsp", 1) / get_base1(Vsp, j, "Vsp", 1)) / (Kpsp / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 318;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(10), stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list())), 
                            ((-(get_base1(Qlu, j, "Qlu", 1)) / get_base1(Vlu, j, "Vlu", 1)) / (Kplu / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 319;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(10), stan::model::cons_list(stan::model::index_uni(14), stan::model::nil_index_list())), 
                            (get_base1(Qlu, j, "Qlu", 1) / get_base1(Vve, j, "Vve", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 320;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(11), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qmu, j, "Qmu", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 321;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(11), stan::model::cons_list(stan::model::index_uni(11), stan::model::nil_index_list())), 
                            ((-(get_base1(Qmu, j, "Qmu", 1)) / get_base1(Vmu, j, "Vmu", 1)) / (Kpmu / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 322;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(12), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qsk, j, "Qsk", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 323;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(12), stan::model::cons_list(stan::model::index_uni(12), stan::model::nil_index_list())), 
                            ((-(get_base1(Qsk, j, "Qsk", 1)) / get_base1(Vsk, j, "Vsk", 1)) / (Kpsk / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 324;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(13), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qsp, j, "Qsp", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 325;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(13), stan::model::cons_list(stan::model::index_uni(13), stan::model::nil_index_list())), 
                            ((-(get_base1(Qsp, j, "Qsp", 1)) / get_base1(Vsp, j, "Vsp", 1)) / (Kpsp / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 326;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            ((get_base1(Qad, j, "Qad", 1) / get_base1(Vad, j, "Vad", 1)) / (Kpad / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 327;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                            ((get_base1(Qbo, j, "Qbo", 1) / get_base1(Vbo, j, "Vbo", 1)) / (Kpbo / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 328;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                            ((get_base1(Qbr, j, "Qbr", 1) / get_base1(Vbr, j, "Vbr", 1)) / (Kpbr / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 329;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list())), 
                            ((get_base1(Qhe, j, "Qhe", 1) / get_base1(Vhe, j, "Vhe", 1)) / (Kphe / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 330;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list())), 
                            ((get_base1(Qki, j, "Qki", 1) / get_base1(Vki, j, "Vki", 1)) / (Kpki / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 331;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list())), 
                            ((get_base1(Qli, j, "Qli", 1) / get_base1(Vli, j, "Vli", 1)) / (Kpli / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 332;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(11), stan::model::nil_index_list())), 
                            ((get_base1(Qmu, j, "Qmu", 1) / get_base1(Vmu, j, "Vmu", 1)) / (Kpmu / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 333;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(12), stan::model::nil_index_list())), 
                            ((get_base1(Qsk, j, "Qsk", 1) / get_base1(Vsk, j, "Vsk", 1)) / (Kpsk / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 334;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(14), stan::model::nil_index_list())), 
                            (-(get_base1(Qlu, j, "Qlu", 1)) / get_base1(Vve, j, "Vve", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 336;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list())), 
                            pmx_solve_linode(stan::model::rvalue(time, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "time"), stan::model::rvalue(amt, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "amt"), stan::model::rvalue(rate, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "rate"), stan::model::rvalue(ii, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "ii"), stan::model::rvalue(evid, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "evid"), stan::model::rvalue(cmt, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "cmt"), stan::model::rvalue(addl, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "addl"), stan::model::rvalue(ss, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "ss"), K, F, tlag), 
                            "assigning variable x");
                current_statement_begin__ = 346;
                for (int k = get_base1(start, j, "start", 1); k <= get_base1(end, j, "end", 1); ++k) {

                    current_statement_begin__ = 347;
                    stan::model::assign(cHat, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                ((stan::math::fmax(stan::math::machine_precision(), get_base1(x, 14, k, "x", 1)) / get_base1(Vve, j, "Vve", 1)) / BP), 
                                "assigning variable cHat");
                }
            }
            current_statement_begin__ = 352;
            if (pstream__) {
                stan_print(pstream__,Kp);
                *pstream__ << std::endl;
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 217;
            size_t thetaHat_j_1_max__ = nRandom;
            for (size_t j_1__ = 0; j_1__ < thetaHat_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(thetaHat(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: thetaHat" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable thetaHat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "thetaHat", thetaHat, 0);

            current_statement_begin__ = 220;
            size_t theta_j_1_max__ = nSubject;
            size_t theta_j_2_max__ = nRandom;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(theta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "theta", theta, 0);

            current_statement_begin__ = 223;
            size_t K_j_1_max__ = nCmt;
            size_t K_j_2_max__ = nCmt;
            for (size_t j_1__ = 0; j_1__ < K_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < K_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(K(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: K" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable K: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 224;
            size_t cHat_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < cHat_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(cHat(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: cHat" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable cHat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "cHat", cHat, 0);

            current_statement_begin__ = 225;
            size_t x_j_1_max__ = nCmt;
            size_t x_j_2_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(x(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: x" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable x: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 228;
            size_t Vbo_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < Vbo_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(Vbo(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Vbo" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Vbo: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "Vbo", Vbo, 0);

            current_statement_begin__ = 229;
            size_t Vmu_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < Vmu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(Vmu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Vmu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Vmu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "Vmu", Vmu, 0);

            current_statement_begin__ = 230;
            size_t Qgu_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < Qgu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(Qgu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Qgu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Qgu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "Qgu", Qgu, 0);

            current_statement_begin__ = 231;
            size_t Qki_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < Qki_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(Qki(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Qki" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Qki: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "Qki", Qki, 0);

            current_statement_begin__ = 232;
            size_t CLhepatic_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < CLhepatic_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(CLhepatic(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: CLhepatic" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable CLhepatic: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "CLhepatic", CLhepatic, 0);

            current_statement_begin__ = 233;
            size_t ka_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < ka_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(ka(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: ka" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable ka: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "ka", ka, 0);

            current_statement_begin__ = 235;
            size_t Vad_k_0_max__ = nSubject;
            for (size_t k_0__ = 0; k_0__ < Vad_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(Vad[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Vad" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Vad: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t Vad_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Vad_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Vad[i_0__]", Vad[i_0__], 5);
            }

            current_statement_begin__ = 236;
            size_t Qli_k_0_max__ = nSubject;
            for (size_t k_0__ = 0; k_0__ < Qli_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(Qli[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Qli" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Qli: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t Qli_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Qli_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Qli[i_0__]", Qli[i_0__], 0);
            }

            current_statement_begin__ = 237;
            size_t Qlu_k_0_max__ = nSubject;
            for (size_t k_0__ = 0; k_0__ < Qlu_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(Qlu[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Qlu" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Qlu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t Qlu_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Qlu_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Qlu[i_0__]", Qlu[i_0__], 0);
            }

            current_statement_begin__ = 240;
            if (stan::math::is_uninitialized(CLrenal)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: CLrenal";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable CLrenal: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 241;
            if (stan::math::is_uninitialized(pKa)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: pKa";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pKa: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 243;
            if (stan::math::is_uninitialized(logP)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: logP";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logP: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 244;
            if (stan::math::is_uninitialized(BP)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: BP";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable BP: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 245;
            size_t Kp_j_1_max__ = nOrgans;
            for (size_t j_1__ = 0; j_1__ < Kp_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(Kp(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Kp" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Kp: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "Kp", Kp, 0);

            current_statement_begin__ = 246;
            if (stan::math::is_uninitialized(Kpad)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Kpad";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Kpad: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 247;
            if (stan::math::is_uninitialized(Kpbo)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Kpbo";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Kpbo: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 248;
            if (stan::math::is_uninitialized(Kpbr)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Kpbr";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Kpbr: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 249;
            if (stan::math::is_uninitialized(Kpgu)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Kpgu";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Kpgu: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 250;
            if (stan::math::is_uninitialized(Kphe)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Kphe";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Kphe: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 251;
            if (stan::math::is_uninitialized(Kpki)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Kpki";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Kpki: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 252;
            if (stan::math::is_uninitialized(Kpli)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Kpli";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Kpli: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 253;
            if (stan::math::is_uninitialized(Kplu)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Kplu";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Kplu: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 254;
            if (stan::math::is_uninitialized(Kpmu)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Kpmu";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Kpmu: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 255;
            if (stan::math::is_uninitialized(Kpsk)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Kpsk";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Kpsk: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 256;
            if (stan::math::is_uninitialized(Kpsp)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Kpsp";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Kpsp: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }

            // model body

            current_statement_begin__ = 358;
            lp_accum__.add(lognormal_log<propto__>(VmuHat, stan::math::log(VmuMeanPrior), stan::math::log(VmuGSDPrior)));
            current_statement_begin__ = 359;
            lp_accum__.add(normal_log<propto__>(VboHat, VboMeanPrior, ((VboCVPrior * VboMeanPrior) / 100)));
            current_statement_begin__ = 360;
            lp_accum__.add(normal_log<propto__>(VboHat, VboMeanPrior, ((VboCVPrior * VboMeanPrior) / 100)));
            current_statement_begin__ = 361;
            lp_accum__.add(normal_log<propto__>(QguHat, (0.16 * COMeanPrior), (((COCVPrior * 0.16) * COMeanPrior) / 100)));
            current_statement_begin__ = 362;
            lp_accum__.add(normal_log<propto__>(QkiHat, (0.19 * COMeanPrior), (((COCVPrior * 0.19) * COMeanPrior) / 100)));
            current_statement_begin__ = 365;
            lp_accum__.add(normal_log<propto__>(kaHat, 0, 2));
            current_statement_begin__ = 366;
            lp_accum__.add(uniform_log<propto__>(CLhepaticHat, CLhepaticLower, CLhepaticUpper));
            current_statement_begin__ = 368;
            lp_accum__.add(uniform_log<propto__>(fu, fuLower, fuUpper));
            current_statement_begin__ = 371;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L, 1));
            current_statement_begin__ = 372;
            lp_accum__.add(cauchy_log<propto__>(omega, 0, 2));
            current_statement_begin__ = 373;
            lp_accum__.add(normal_log<propto__>(to_vector(eta), 0, 1));
            current_statement_begin__ = 376;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 2));
            current_statement_begin__ = 380;
            lp_accum__.add(lognormal_log<propto__>(cObs, stan::math::log(stan::model::rvalue(cHat, stan::model::cons_list(stan::model::index_multi(iObs), stan::model::nil_index_list()), "cHat")), sigma));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("VboHat");
        names__.push_back("VmuHat");
        names__.push_back("QguHat");
        names__.push_back("QkiHat");
        names__.push_back("CLhepaticHat");
        names__.push_back("kaHat");
        names__.push_back("fu");
        names__.push_back("omega");
        names__.push_back("L");
        names__.push_back("eta");
        names__.push_back("sigma");
        names__.push_back("thetaHat");
        names__.push_back("theta");
        names__.push_back("K");
        names__.push_back("cHat");
        names__.push_back("x");
        names__.push_back("Vbo");
        names__.push_back("Vmu");
        names__.push_back("Qgu");
        names__.push_back("Qki");
        names__.push_back("CLhepatic");
        names__.push_back("ka");
        names__.push_back("Vad");
        names__.push_back("Qli");
        names__.push_back("Qlu");
        names__.push_back("CLrenal");
        names__.push_back("pKa");
        names__.push_back("logP");
        names__.push_back("BP");
        names__.push_back("Kp");
        names__.push_back("Kpad");
        names__.push_back("Kpbo");
        names__.push_back("Kpbr");
        names__.push_back("Kpgu");
        names__.push_back("Kphe");
        names__.push_back("Kpki");
        names__.push_back("Kpli");
        names__.push_back("Kplu");
        names__.push_back("Kpmu");
        names__.push_back("Kpsk");
        names__.push_back("Kpsp");
        names__.push_back("cHatPred");
        names__.push_back("cObsCond");
        names__.push_back("cObsPred");
        names__.push_back("thetaPred");
        names__.push_back("VmuPred");
        names__.push_back("VboPred");
        names__.push_back("QguPred");
        names__.push_back("QkiPred");
        names__.push_back("CLhepaticPred");
        names__.push_back("kaPred");
        names__.push_back("VadPred");
        names__.push_back("QliPred");
        names__.push_back("QluPred");
        names__.push_back("etaPred");
        names__.push_back("rho");
        names__.push_back("xPred");
        names__.push_back("KPred");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nRandom);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nRandom);
        dims__.push_back(nRandom);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nRandom);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nRandom);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dims__.push_back(nRandom);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nCmt);
        dims__.push_back(nCmt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nCmt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nOrgans);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dims__.push_back(nRandom);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nRandom);
        dims__.push_back(nSubject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nRandom);
        dims__.push_back(nRandom);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nCmt);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nCmt);
        dims__.push_back(nCmt);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "theophLinPBPK1_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double VboHat = in__.scalar_lub_constrain(VboLower, VboUpper);
        vars__.push_back(VboHat);

        double VmuHat = in__.scalar_lub_constrain(VmuLower, VmuUpper);
        vars__.push_back(VmuHat);

        double QguHat = in__.scalar_lub_constrain(QguLower, QguUpper);
        vars__.push_back(QguHat);

        double QkiHat = in__.scalar_lub_constrain(QkiLower, QkiUpper);
        vars__.push_back(QkiHat);

        double CLhepaticHat = in__.scalar_lub_constrain(CLhepaticLower, CLhepaticUpper);
        vars__.push_back(CLhepaticHat);

        double kaHat = in__.scalar_lb_constrain(0);
        vars__.push_back(kaHat);

        double fu = in__.scalar_lub_constrain(fuLower, fuUpper);
        vars__.push_back(fu);

        Eigen::Matrix<double, Eigen::Dynamic, 1> omega = in__.vector_lb_constrain(0, nRandom);
        size_t omega_j_1_max__ = nRandom;
        for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
            vars__.push_back(omega(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L = in__.cholesky_factor_corr_constrain(nRandom);
        size_t L_j_2_max__ = nRandom;
        size_t L_j_1_max__ = nRandom;
        for (size_t j_2__ = 0; j_2__ < L_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
                vars__.push_back(L(j_1__, j_2__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> eta = in__.matrix_constrain(nRandom, nSubject);
        size_t eta_j_2_max__ = nSubject;
        size_t eta_j_1_max__ = nRandom;
        for (size_t j_2__ = 0; j_2__ < eta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                vars__.push_back(eta(j_1__, j_2__));
            }
        }

        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 217;
            validate_non_negative_index("thetaHat", "nRandom", nRandom);
            Eigen::Matrix<double, Eigen::Dynamic, 1> thetaHat(nRandom);
            stan::math::initialize(thetaHat, DUMMY_VAR__);
            stan::math::fill(thetaHat, DUMMY_VAR__);

            current_statement_begin__ = 220;
            validate_non_negative_index("theta", "nSubject", nSubject);
            validate_non_negative_index("theta", "nRandom", nRandom);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta(nSubject, nRandom);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);

            current_statement_begin__ = 223;
            validate_non_negative_index("K", "nCmt", nCmt);
            validate_non_negative_index("K", "nCmt", nCmt);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> K(nCmt, nCmt);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);

            current_statement_begin__ = 224;
            validate_non_negative_index("cHat", "nt", nt);
            Eigen::Matrix<double, 1, Eigen::Dynamic> cHat(nt);
            stan::math::initialize(cHat, DUMMY_VAR__);
            stan::math::fill(cHat, DUMMY_VAR__);

            current_statement_begin__ = 225;
            validate_non_negative_index("x", "nCmt", nCmt);
            validate_non_negative_index("x", "nt", nt);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> x(nCmt, nt);
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);

            current_statement_begin__ = 228;
            validate_non_negative_index("Vbo", "nSubject", nSubject);
            Eigen::Matrix<double, 1, Eigen::Dynamic> Vbo(nSubject);
            stan::math::initialize(Vbo, DUMMY_VAR__);
            stan::math::fill(Vbo, DUMMY_VAR__);

            current_statement_begin__ = 229;
            validate_non_negative_index("Vmu", "nSubject", nSubject);
            Eigen::Matrix<double, 1, Eigen::Dynamic> Vmu(nSubject);
            stan::math::initialize(Vmu, DUMMY_VAR__);
            stan::math::fill(Vmu, DUMMY_VAR__);

            current_statement_begin__ = 230;
            validate_non_negative_index("Qgu", "nSubject", nSubject);
            Eigen::Matrix<double, 1, Eigen::Dynamic> Qgu(nSubject);
            stan::math::initialize(Qgu, DUMMY_VAR__);
            stan::math::fill(Qgu, DUMMY_VAR__);

            current_statement_begin__ = 231;
            validate_non_negative_index("Qki", "nSubject", nSubject);
            Eigen::Matrix<double, 1, Eigen::Dynamic> Qki(nSubject);
            stan::math::initialize(Qki, DUMMY_VAR__);
            stan::math::fill(Qki, DUMMY_VAR__);

            current_statement_begin__ = 232;
            validate_non_negative_index("CLhepatic", "nSubject", nSubject);
            Eigen::Matrix<double, 1, Eigen::Dynamic> CLhepatic(nSubject);
            stan::math::initialize(CLhepatic, DUMMY_VAR__);
            stan::math::fill(CLhepatic, DUMMY_VAR__);

            current_statement_begin__ = 233;
            validate_non_negative_index("ka", "nSubject", nSubject);
            Eigen::Matrix<double, 1, Eigen::Dynamic> ka(nSubject);
            stan::math::initialize(ka, DUMMY_VAR__);
            stan::math::fill(ka, DUMMY_VAR__);

            current_statement_begin__ = 235;
            validate_non_negative_index("Vad", "nSubject", nSubject);
            std::vector<double> Vad(nSubject, double(0));
            stan::math::initialize(Vad, DUMMY_VAR__);
            stan::math::fill(Vad, DUMMY_VAR__);

            current_statement_begin__ = 236;
            validate_non_negative_index("Qli", "nSubject", nSubject);
            std::vector<double> Qli(nSubject, double(0));
            stan::math::initialize(Qli, DUMMY_VAR__);
            stan::math::fill(Qli, DUMMY_VAR__);

            current_statement_begin__ = 237;
            validate_non_negative_index("Qlu", "nSubject", nSubject);
            std::vector<double> Qlu(nSubject, double(0));
            stan::math::initialize(Qlu, DUMMY_VAR__);
            stan::math::fill(Qlu, DUMMY_VAR__);

            current_statement_begin__ = 240;
            double CLrenal;
            (void) CLrenal;  // dummy to suppress unused var warning
            stan::math::initialize(CLrenal, DUMMY_VAR__);
            stan::math::fill(CLrenal, DUMMY_VAR__);
            stan::math::assign(CLrenal,CLrenalPrior);

            current_statement_begin__ = 241;
            double pKa;
            (void) pKa;  // dummy to suppress unused var warning
            stan::math::initialize(pKa, DUMMY_VAR__);
            stan::math::fill(pKa, DUMMY_VAR__);
            stan::math::assign(pKa,pKaPrior);

            current_statement_begin__ = 243;
            double logP;
            (void) logP;  // dummy to suppress unused var warning
            stan::math::initialize(logP, DUMMY_VAR__);
            stan::math::fill(logP, DUMMY_VAR__);
            stan::math::assign(logP,logPPrior);

            current_statement_begin__ = 244;
            double BP;
            (void) BP;  // dummy to suppress unused var warning
            stan::math::initialize(BP, DUMMY_VAR__);
            stan::math::fill(BP, DUMMY_VAR__);
            stan::math::assign(BP,BPPrior);

            current_statement_begin__ = 245;
            validate_non_negative_index("Kp", "nOrgans", nOrgans);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Kp(nOrgans);
            stan::math::initialize(Kp, DUMMY_VAR__);
            stan::math::fill(Kp, DUMMY_VAR__);

            current_statement_begin__ = 246;
            double Kpad;
            (void) Kpad;  // dummy to suppress unused var warning
            stan::math::initialize(Kpad, DUMMY_VAR__);
            stan::math::fill(Kpad, DUMMY_VAR__);

            current_statement_begin__ = 247;
            double Kpbo;
            (void) Kpbo;  // dummy to suppress unused var warning
            stan::math::initialize(Kpbo, DUMMY_VAR__);
            stan::math::fill(Kpbo, DUMMY_VAR__);

            current_statement_begin__ = 248;
            double Kpbr;
            (void) Kpbr;  // dummy to suppress unused var warning
            stan::math::initialize(Kpbr, DUMMY_VAR__);
            stan::math::fill(Kpbr, DUMMY_VAR__);

            current_statement_begin__ = 249;
            double Kpgu;
            (void) Kpgu;  // dummy to suppress unused var warning
            stan::math::initialize(Kpgu, DUMMY_VAR__);
            stan::math::fill(Kpgu, DUMMY_VAR__);

            current_statement_begin__ = 250;
            double Kphe;
            (void) Kphe;  // dummy to suppress unused var warning
            stan::math::initialize(Kphe, DUMMY_VAR__);
            stan::math::fill(Kphe, DUMMY_VAR__);

            current_statement_begin__ = 251;
            double Kpki;
            (void) Kpki;  // dummy to suppress unused var warning
            stan::math::initialize(Kpki, DUMMY_VAR__);
            stan::math::fill(Kpki, DUMMY_VAR__);

            current_statement_begin__ = 252;
            double Kpli;
            (void) Kpli;  // dummy to suppress unused var warning
            stan::math::initialize(Kpli, DUMMY_VAR__);
            stan::math::fill(Kpli, DUMMY_VAR__);

            current_statement_begin__ = 253;
            double Kplu;
            (void) Kplu;  // dummy to suppress unused var warning
            stan::math::initialize(Kplu, DUMMY_VAR__);
            stan::math::fill(Kplu, DUMMY_VAR__);

            current_statement_begin__ = 254;
            double Kpmu;
            (void) Kpmu;  // dummy to suppress unused var warning
            stan::math::initialize(Kpmu, DUMMY_VAR__);
            stan::math::fill(Kpmu, DUMMY_VAR__);

            current_statement_begin__ = 255;
            double Kpsk;
            (void) Kpsk;  // dummy to suppress unused var warning
            stan::math::initialize(Kpsk, DUMMY_VAR__);
            stan::math::fill(Kpsk, DUMMY_VAR__);

            current_statement_begin__ = 256;
            double Kpsp;
            (void) Kpsp;  // dummy to suppress unused var warning
            stan::math::initialize(Kpsp, DUMMY_VAR__);
            stan::math::fill(Kpsp, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 258;
            stan::math::assign(Kp, calcKpPT(logP, pKa, fu, BP, TC, pstream__));
            current_statement_begin__ = 259;
            stan::math::assign(Kpad, get_base1(Kp, 1, "Kp", 1));
            current_statement_begin__ = 260;
            stan::math::assign(Kpbo, get_base1(Kp, 2, "Kp", 1));
            current_statement_begin__ = 261;
            stan::math::assign(Kpbr, get_base1(Kp, 3, "Kp", 1));
            current_statement_begin__ = 262;
            stan::math::assign(Kpgu, get_base1(Kp, 4, "Kp", 1));
            current_statement_begin__ = 263;
            stan::math::assign(Kphe, get_base1(Kp, 5, "Kp", 1));
            current_statement_begin__ = 264;
            stan::math::assign(Kpki, get_base1(Kp, 6, "Kp", 1));
            current_statement_begin__ = 265;
            stan::math::assign(Kpli, get_base1(Kp, 7, "Kp", 1));
            current_statement_begin__ = 266;
            stan::math::assign(Kplu, get_base1(Kp, 8, "Kp", 1));
            current_statement_begin__ = 267;
            stan::math::assign(Kpmu, get_base1(Kp, 9, "Kp", 1));
            current_statement_begin__ = 268;
            stan::math::assign(Kpsk, get_base1(Kp, 11, "Kp", 1));
            current_statement_begin__ = 269;
            stan::math::assign(Kpsp, get_base1(Kp, 10, "Kp", 1));
            current_statement_begin__ = 271;
            stan::model::assign(thetaHat, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        VmuHat, 
                        "assigning variable thetaHat");
            current_statement_begin__ = 272;
            stan::model::assign(thetaHat, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        VboHat, 
                        "assigning variable thetaHat");
            current_statement_begin__ = 273;
            stan::model::assign(thetaHat, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        QguHat, 
                        "assigning variable thetaHat");
            current_statement_begin__ = 274;
            stan::model::assign(thetaHat, 
                        stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                        QkiHat, 
                        "assigning variable thetaHat");
            current_statement_begin__ = 275;
            stan::model::assign(thetaHat, 
                        stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                        CLhepaticHat, 
                        "assigning variable thetaHat");
            current_statement_begin__ = 276;
            stan::model::assign(thetaHat, 
                        stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                        kaHat, 
                        "assigning variable thetaHat");
            current_statement_begin__ = 278;
            stan::math::assign(theta, transpose(elt_multiply(rep_matrix(thetaHat, nSubject), stan::math::exp(diag_pre_multiply(omega, multiply(L, eta))))));
            current_statement_begin__ = 281;
            for (int j = 1; j <= nSubject; ++j) {

                current_statement_begin__ = 283;
                stan::model::assign(Vmu, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(theta, j, 1, "theta", 1) * pow((get_base1(height, j, "height", 1) / 1.76), 2)), 
                            "assigning variable Vmu");
                current_statement_begin__ = 284;
                stan::model::assign(Vbo, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(theta, j, 2, "theta", 1) * pow((get_base1(height, j, "height", 1) / 1.76), 2)), 
                            "assigning variable Vbo");
                current_statement_begin__ = 285;
                stan::model::assign(Qgu, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(theta, j, 3, "theta", 1) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Qgu");
                current_statement_begin__ = 286;
                stan::model::assign(Qki, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(theta, j, 4, "theta", 1) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable Qki");
                current_statement_begin__ = 287;
                stan::model::assign(CLhepatic, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            get_base1(theta, j, 5, "theta", 1), 
                            "assigning variable CLhepatic");
                current_statement_begin__ = 288;
                stan::model::assign(ka, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            get_base1(theta, j, 6, "theta", 1), 
                            "assigning variable ka");
                current_statement_begin__ = 291;
                stan::model::assign(Vad, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(weight, j, "weight", 1) - (((((((((((get_base1(Var, j, "Var", 1) + get_base1(Vbo, j, "Vbo", 1)) + get_base1(Vbr, j, "Vbr", 1)) + get_base1(Vgu, j, "Vgu", 1)) + get_base1(Vhe, j, "Vhe", 1)) + get_base1(Vki, j, "Vki", 1)) + get_base1(Vli, j, "Vli", 1)) + get_base1(Vlu, j, "Vlu", 1)) + get_base1(Vmu, j, "Vmu", 1)) + get_base1(Vsk, j, "Vsk", 1)) + get_base1(Vsp, j, "Vsp", 1)) + get_base1(Vve, j, "Vve", 1))), 
                            "assigning variable Vad");
                current_statement_begin__ = 292;
                stan::model::assign(Qli, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            ((get_base1(Qsp, j, "Qsp", 1) + get_base1(Qgu, j, "Qgu", 1)) + get_base1(Qha, j, "Qha", 1)), 
                            "assigning variable Qli");
                current_statement_begin__ = 293;
                stan::model::assign(Qlu, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (((((((get_base1(Qad, j, "Qad", 1) + get_base1(Qbo, j, "Qbo", 1)) + get_base1(Qbr, j, "Qbr", 1)) + get_base1(Qhe, j, "Qhe", 1)) + get_base1(Qki, j, "Qki", 1)) + get_base1(Qli, j, "Qli", 1)) + get_base1(Qmu, j, "Qmu", 1)) + get_base1(Qsk, j, "Qsk", 1)), 
                            "assigning variable Qlu");
                current_statement_begin__ = 296;
                stan::math::assign(K, rep_matrix(0, nCmt, nCmt));
                current_statement_begin__ = 298;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            ((-(get_base1(Qad, j, "Qad", 1)) / get_base1(Vad, j, "Vad", 1)) / (Kpad / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 299;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qad, j, "Qad", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 300;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (-(get_base1(Qlu, j, "Qlu", 1)) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 301;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list())), 
                            ((get_base1(Qlu, j, "Qlu", 1) / get_base1(Vlu, j, "Vlu", 1)) / (Kplu / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 302;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qbo, j, "Qbo", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 303;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                            ((-(get_base1(Qbo, j, "Qbo", 1)) / get_base1(Vbo, j, "Vbo", 1)) / (Kpbo / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 304;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(4), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qbr, j, "Qbr", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 305;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(4), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                            ((-(get_base1(Qbr, j, "Qbr", 1)) / get_base1(Vbr, j, "Vbr", 1)) / (Kpbr / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 306;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(5), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                            -(get_base1(ka, j, "ka", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 307;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(6), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qgu, j, "Qgu", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 308;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(6), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                            get_base1(ka, j, "ka", 1), 
                            "assigning variable K");
                current_statement_begin__ = 309;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(6), stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list())), 
                            ((-(get_base1(Qgu, j, "Qgu", 1)) / get_base1(Vgu, j, "Vgu", 1)) / (Kpgu / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 310;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(7), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qhe, j, "Qhe", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 311;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(7), stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list())), 
                            ((-(get_base1(Qhe, j, "Qhe", 1)) / get_base1(Vhe, j, "Vhe", 1)) / (Kphe / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 312;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(8), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qki, j, "Qki", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 313;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(8), stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list())), 
                            ((-((get_base1(Qki, j, "Qki", 1) + (fu * CLrenal))) / get_base1(Vki, j, "Vki", 1)) / (Kpki / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 314;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(9), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qha, j, "Qha", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 315;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(9), stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list())), 
                            ((get_base1(Qgu, j, "Qgu", 1) / get_base1(Vgu, j, "Vgu", 1)) / (Kpgu / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 316;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(9), stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list())), 
                            ((-((get_base1(Qli, j, "Qli", 1) + (fu * get_base1(CLhepatic, j, "CLhepatic", 1)))) / get_base1(Vli, j, "Vli", 1)) / (Kpli / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 317;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(9), stan::model::cons_list(stan::model::index_uni(13), stan::model::nil_index_list())), 
                            ((get_base1(Qsp, j, "Qsp", 1) / get_base1(Vsp, j, "Vsp", 1)) / (Kpsp / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 318;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(10), stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list())), 
                            ((-(get_base1(Qlu, j, "Qlu", 1)) / get_base1(Vlu, j, "Vlu", 1)) / (Kplu / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 319;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(10), stan::model::cons_list(stan::model::index_uni(14), stan::model::nil_index_list())), 
                            (get_base1(Qlu, j, "Qlu", 1) / get_base1(Vve, j, "Vve", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 320;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(11), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qmu, j, "Qmu", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 321;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(11), stan::model::cons_list(stan::model::index_uni(11), stan::model::nil_index_list())), 
                            ((-(get_base1(Qmu, j, "Qmu", 1)) / get_base1(Vmu, j, "Vmu", 1)) / (Kpmu / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 322;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(12), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qsk, j, "Qsk", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 323;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(12), stan::model::cons_list(stan::model::index_uni(12), stan::model::nil_index_list())), 
                            ((-(get_base1(Qsk, j, "Qsk", 1)) / get_base1(Vsk, j, "Vsk", 1)) / (Kpsk / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 324;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(13), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qsp, j, "Qsp", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 325;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(13), stan::model::cons_list(stan::model::index_uni(13), stan::model::nil_index_list())), 
                            ((-(get_base1(Qsp, j, "Qsp", 1)) / get_base1(Vsp, j, "Vsp", 1)) / (Kpsp / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 326;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            ((get_base1(Qad, j, "Qad", 1) / get_base1(Vad, j, "Vad", 1)) / (Kpad / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 327;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                            ((get_base1(Qbo, j, "Qbo", 1) / get_base1(Vbo, j, "Vbo", 1)) / (Kpbo / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 328;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                            ((get_base1(Qbr, j, "Qbr", 1) / get_base1(Vbr, j, "Vbr", 1)) / (Kpbr / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 329;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list())), 
                            ((get_base1(Qhe, j, "Qhe", 1) / get_base1(Vhe, j, "Vhe", 1)) / (Kphe / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 330;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list())), 
                            ((get_base1(Qki, j, "Qki", 1) / get_base1(Vki, j, "Vki", 1)) / (Kpki / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 331;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list())), 
                            ((get_base1(Qli, j, "Qli", 1) / get_base1(Vli, j, "Vli", 1)) / (Kpli / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 332;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(11), stan::model::nil_index_list())), 
                            ((get_base1(Qmu, j, "Qmu", 1) / get_base1(Vmu, j, "Vmu", 1)) / (Kpmu / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 333;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(12), stan::model::nil_index_list())), 
                            ((get_base1(Qsk, j, "Qsk", 1) / get_base1(Vsk, j, "Vsk", 1)) / (Kpsk / BP)), 
                            "assigning variable K");
                current_statement_begin__ = 334;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(14), stan::model::nil_index_list())), 
                            (-(get_base1(Qlu, j, "Qlu", 1)) / get_base1(Vve, j, "Vve", 1)), 
                            "assigning variable K");
                current_statement_begin__ = 336;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list())), 
                            pmx_solve_linode(stan::model::rvalue(time, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "time"), stan::model::rvalue(amt, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "amt"), stan::model::rvalue(rate, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "rate"), stan::model::rvalue(ii, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "ii"), stan::model::rvalue(evid, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "evid"), stan::model::rvalue(cmt, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "cmt"), stan::model::rvalue(addl, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "addl"), stan::model::rvalue(ss, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "ss"), K, F, tlag), 
                            "assigning variable x");
                current_statement_begin__ = 346;
                for (int k = get_base1(start, j, "start", 1); k <= get_base1(end, j, "end", 1); ++k) {

                    current_statement_begin__ = 347;
                    stan::model::assign(cHat, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                ((stan::math::fmax(stan::math::machine_precision(), get_base1(x, 14, k, "x", 1)) / get_base1(Vve, j, "Vve", 1)) / BP), 
                                "assigning variable cHat");
                }
            }
            current_statement_begin__ = 352;
            if (pstream__) {
                stan_print(pstream__,Kp);
                *pstream__ << std::endl;
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 217;
            check_greater_or_equal(function__, "thetaHat", thetaHat, 0);

            current_statement_begin__ = 220;
            check_greater_or_equal(function__, "theta", theta, 0);

            current_statement_begin__ = 224;
            check_greater_or_equal(function__, "cHat", cHat, 0);

            current_statement_begin__ = 228;
            check_greater_or_equal(function__, "Vbo", Vbo, 0);

            current_statement_begin__ = 229;
            check_greater_or_equal(function__, "Vmu", Vmu, 0);

            current_statement_begin__ = 230;
            check_greater_or_equal(function__, "Qgu", Qgu, 0);

            current_statement_begin__ = 231;
            check_greater_or_equal(function__, "Qki", Qki, 0);

            current_statement_begin__ = 232;
            check_greater_or_equal(function__, "CLhepatic", CLhepatic, 0);

            current_statement_begin__ = 233;
            check_greater_or_equal(function__, "ka", ka, 0);

            current_statement_begin__ = 235;
            size_t Vad_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Vad_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Vad[i_0__]", Vad[i_0__], 5);
            }

            current_statement_begin__ = 236;
            size_t Qli_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Qli_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Qli[i_0__]", Qli[i_0__], 0);
            }

            current_statement_begin__ = 237;
            size_t Qlu_i_0_max__ = nSubject;
            for (size_t i_0__ = 0; i_0__ < Qlu_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Qlu[i_0__]", Qlu[i_0__], 0);
            }

            current_statement_begin__ = 245;
            check_greater_or_equal(function__, "Kp", Kp, 0);

            // write transformed parameters
            if (include_tparams__) {
                size_t thetaHat_j_1_max__ = nRandom;
                for (size_t j_1__ = 0; j_1__ < thetaHat_j_1_max__; ++j_1__) {
                    vars__.push_back(thetaHat(j_1__));
                }
                size_t theta_j_2_max__ = nRandom;
                size_t theta_j_1_max__ = nSubject;
                for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                        vars__.push_back(theta(j_1__, j_2__));
                    }
                }
                size_t K_j_2_max__ = nCmt;
                size_t K_j_1_max__ = nCmt;
                for (size_t j_2__ = 0; j_2__ < K_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < K_j_1_max__; ++j_1__) {
                        vars__.push_back(K(j_1__, j_2__));
                    }
                }
                size_t cHat_j_1_max__ = nt;
                for (size_t j_1__ = 0; j_1__ < cHat_j_1_max__; ++j_1__) {
                    vars__.push_back(cHat(j_1__));
                }
                size_t x_j_2_max__ = nt;
                size_t x_j_1_max__ = nCmt;
                for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                        vars__.push_back(x(j_1__, j_2__));
                    }
                }
                size_t Vbo_j_1_max__ = nSubject;
                for (size_t j_1__ = 0; j_1__ < Vbo_j_1_max__; ++j_1__) {
                    vars__.push_back(Vbo(j_1__));
                }
                size_t Vmu_j_1_max__ = nSubject;
                for (size_t j_1__ = 0; j_1__ < Vmu_j_1_max__; ++j_1__) {
                    vars__.push_back(Vmu(j_1__));
                }
                size_t Qgu_j_1_max__ = nSubject;
                for (size_t j_1__ = 0; j_1__ < Qgu_j_1_max__; ++j_1__) {
                    vars__.push_back(Qgu(j_1__));
                }
                size_t Qki_j_1_max__ = nSubject;
                for (size_t j_1__ = 0; j_1__ < Qki_j_1_max__; ++j_1__) {
                    vars__.push_back(Qki(j_1__));
                }
                size_t CLhepatic_j_1_max__ = nSubject;
                for (size_t j_1__ = 0; j_1__ < CLhepatic_j_1_max__; ++j_1__) {
                    vars__.push_back(CLhepatic(j_1__));
                }
                size_t ka_j_1_max__ = nSubject;
                for (size_t j_1__ = 0; j_1__ < ka_j_1_max__; ++j_1__) {
                    vars__.push_back(ka(j_1__));
                }
                size_t Vad_k_0_max__ = nSubject;
                for (size_t k_0__ = 0; k_0__ < Vad_k_0_max__; ++k_0__) {
                    vars__.push_back(Vad[k_0__]);
                }
                size_t Qli_k_0_max__ = nSubject;
                for (size_t k_0__ = 0; k_0__ < Qli_k_0_max__; ++k_0__) {
                    vars__.push_back(Qli[k_0__]);
                }
                size_t Qlu_k_0_max__ = nSubject;
                for (size_t k_0__ = 0; k_0__ < Qlu_k_0_max__; ++k_0__) {
                    vars__.push_back(Qlu[k_0__]);
                }
                vars__.push_back(CLrenal);
                vars__.push_back(pKa);
                vars__.push_back(logP);
                vars__.push_back(BP);
                size_t Kp_j_1_max__ = nOrgans;
                for (size_t j_1__ = 0; j_1__ < Kp_j_1_max__; ++j_1__) {
                    vars__.push_back(Kp(j_1__));
                }
                vars__.push_back(Kpad);
                vars__.push_back(Kpbo);
                vars__.push_back(Kpbr);
                vars__.push_back(Kpgu);
                vars__.push_back(Kphe);
                vars__.push_back(Kpki);
                vars__.push_back(Kpli);
                vars__.push_back(Kplu);
                vars__.push_back(Kpmu);
                vars__.push_back(Kpsk);
                vars__.push_back(Kpsp);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 386;
            validate_non_negative_index("cHatPred", "nt", nt);
            Eigen::Matrix<double, 1, Eigen::Dynamic> cHatPred(nt);
            stan::math::initialize(cHatPred, DUMMY_VAR__);
            stan::math::fill(cHatPred, DUMMY_VAR__);

            current_statement_begin__ = 387;
            validate_non_negative_index("cObsCond", "nt", nt);
            Eigen::Matrix<double, Eigen::Dynamic, 1> cObsCond(nt);
            stan::math::initialize(cObsCond, DUMMY_VAR__);
            stan::math::fill(cObsCond, DUMMY_VAR__);

            current_statement_begin__ = 388;
            validate_non_negative_index("cObsPred", "nt", nt);
            Eigen::Matrix<double, Eigen::Dynamic, 1> cObsPred(nt);
            stan::math::initialize(cObsPred, DUMMY_VAR__);
            stan::math::fill(cObsPred, DUMMY_VAR__);

            current_statement_begin__ = 389;
            validate_non_negative_index("thetaPred", "nSubject", nSubject);
            validate_non_negative_index("thetaPred", "nRandom", nRandom);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> thetaPred(nSubject, nRandom);
            stan::math::initialize(thetaPred, DUMMY_VAR__);
            stan::math::fill(thetaPred, DUMMY_VAR__);

            current_statement_begin__ = 393;
            validate_non_negative_index("VmuPred", "nSubject", nSubject);
            Eigen::Matrix<double, Eigen::Dynamic, 1> VmuPred(nSubject);
            stan::math::initialize(VmuPred, DUMMY_VAR__);
            stan::math::fill(VmuPred, DUMMY_VAR__);

            current_statement_begin__ = 394;
            validate_non_negative_index("VboPred", "nSubject", nSubject);
            Eigen::Matrix<double, Eigen::Dynamic, 1> VboPred(nSubject);
            stan::math::initialize(VboPred, DUMMY_VAR__);
            stan::math::fill(VboPred, DUMMY_VAR__);

            current_statement_begin__ = 395;
            validate_non_negative_index("QguPred", "nSubject", nSubject);
            Eigen::Matrix<double, Eigen::Dynamic, 1> QguPred(nSubject);
            stan::math::initialize(QguPred, DUMMY_VAR__);
            stan::math::fill(QguPred, DUMMY_VAR__);

            current_statement_begin__ = 396;
            validate_non_negative_index("QkiPred", "nSubject", nSubject);
            Eigen::Matrix<double, Eigen::Dynamic, 1> QkiPred(nSubject);
            stan::math::initialize(QkiPred, DUMMY_VAR__);
            stan::math::fill(QkiPred, DUMMY_VAR__);

            current_statement_begin__ = 397;
            validate_non_negative_index("CLhepaticPred", "nSubject", nSubject);
            Eigen::Matrix<double, Eigen::Dynamic, 1> CLhepaticPred(nSubject);
            stan::math::initialize(CLhepaticPred, DUMMY_VAR__);
            stan::math::fill(CLhepaticPred, DUMMY_VAR__);

            current_statement_begin__ = 398;
            validate_non_negative_index("kaPred", "nSubject", nSubject);
            Eigen::Matrix<double, Eigen::Dynamic, 1> kaPred(nSubject);
            stan::math::initialize(kaPred, DUMMY_VAR__);
            stan::math::fill(kaPred, DUMMY_VAR__);

            current_statement_begin__ = 400;
            validate_non_negative_index("VadPred", "nSubject", nSubject);
            Eigen::Matrix<double, Eigen::Dynamic, 1> VadPred(nSubject);
            stan::math::initialize(VadPred, DUMMY_VAR__);
            stan::math::fill(VadPred, DUMMY_VAR__);

            current_statement_begin__ = 401;
            validate_non_negative_index("QliPred", "nSubject", nSubject);
            Eigen::Matrix<double, Eigen::Dynamic, 1> QliPred(nSubject);
            stan::math::initialize(QliPred, DUMMY_VAR__);
            stan::math::fill(QliPred, DUMMY_VAR__);

            current_statement_begin__ = 402;
            validate_non_negative_index("QluPred", "nSubject", nSubject);
            Eigen::Matrix<double, Eigen::Dynamic, 1> QluPred(nSubject);
            stan::math::initialize(QluPred, DUMMY_VAR__);
            stan::math::fill(QluPred, DUMMY_VAR__);

            current_statement_begin__ = 405;
            validate_non_negative_index("etaPred", "nRandom", nRandom);
            validate_non_negative_index("etaPred", "nSubject", nSubject);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> etaPred(nRandom, nSubject);
            stan::math::initialize(etaPred, DUMMY_VAR__);
            stan::math::fill(etaPred, DUMMY_VAR__);

            current_statement_begin__ = 406;
            validate_non_negative_index("rho", "nRandom", nRandom);
            validate_non_negative_index("rho", "nRandom", nRandom);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> rho(nRandom, nRandom);
            stan::math::initialize(rho, DUMMY_VAR__);
            stan::math::fill(rho, DUMMY_VAR__);

            current_statement_begin__ = 408;
            validate_non_negative_index("xPred", "nCmt", nCmt);
            validate_non_negative_index("xPred", "nt", nt);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> xPred(nCmt, nt);
            stan::math::initialize(xPred, DUMMY_VAR__);
            stan::math::fill(xPred, DUMMY_VAR__);

            current_statement_begin__ = 409;
            validate_non_negative_index("KPred", "nCmt", nCmt);
            validate_non_negative_index("KPred", "nCmt", nCmt);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> KPred(nCmt, nCmt);
            stan::math::initialize(KPred, DUMMY_VAR__);
            stan::math::fill(KPred, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 411;
            stan::math::assign(rho, multiply(L, transpose(L)));
            current_statement_begin__ = 412;
            for (int j = 1; j <= nSubject; ++j) {

                current_statement_begin__ = 413;
                for (int i = 1; i <= nRandom; ++i) {
                    current_statement_begin__ = 414;
                    stan::model::assign(etaPred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                normal_rng(0, 1, base_rng__), 
                                "assigning variable etaPred");
                }
            }
            current_statement_begin__ = 417;
            stan::math::assign(thetaPred, transpose(elt_multiply(rep_matrix(thetaHat, nSubject), stan::math::exp(diag_pre_multiply(omega, multiply(L, etaPred))))));
            current_statement_begin__ = 420;
            for (int j = 1; j <= nSubject; ++j) {

                current_statement_begin__ = 422;
                stan::model::assign(VmuPred, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(thetaPred, j, 1, "thetaPred", 1) * pow((get_base1(height, j, "height", 1) / 1.76), 2)), 
                            "assigning variable VmuPred");
                current_statement_begin__ = 423;
                stan::model::assign(VboPred, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(thetaPred, j, 2, "thetaPred", 1) * pow((get_base1(height, j, "height", 1) / 1.76), 2)), 
                            "assigning variable VboPred");
                current_statement_begin__ = 424;
                stan::model::assign(QguPred, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(thetaPred, j, 3, "thetaPred", 1) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable QguPred");
                current_statement_begin__ = 425;
                stan::model::assign(QkiPred, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(thetaPred, j, 4, "thetaPred", 1) * pow((get_base1(height, j, "height", 1) / 1.76), 0.75)), 
                            "assigning variable QkiPred");
                current_statement_begin__ = 426;
                stan::model::assign(CLhepaticPred, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            get_base1(thetaPred, j, 5, "thetaPred", 1), 
                            "assigning variable CLhepaticPred");
                current_statement_begin__ = 427;
                stan::model::assign(kaPred, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            get_base1(thetaPred, j, 6, "thetaPred", 1), 
                            "assigning variable kaPred");
                current_statement_begin__ = 430;
                stan::model::assign(VadPred, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(weight, j, "weight", 1) - (((((((((((get_base1(Var, j, "Var", 1) + get_base1(VboPred, j, "VboPred", 1)) + get_base1(Vbr, j, "Vbr", 1)) + get_base1(Vgu, j, "Vgu", 1)) + get_base1(Vhe, j, "Vhe", 1)) + get_base1(Vki, j, "Vki", 1)) + get_base1(Vli, j, "Vli", 1)) + get_base1(Vlu, j, "Vlu", 1)) + get_base1(VmuPred, j, "VmuPred", 1)) + get_base1(Vsk, j, "Vsk", 1)) + get_base1(Vsp, j, "Vsp", 1)) + get_base1(Vve, j, "Vve", 1))), 
                            "assigning variable VadPred");
                current_statement_begin__ = 431;
                stan::model::assign(QliPred, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            ((get_base1(Qsp, j, "Qsp", 1) + get_base1(QguPred, j, "QguPred", 1)) + get_base1(Qha, j, "Qha", 1)), 
                            "assigning variable QliPred");
                current_statement_begin__ = 432;
                stan::model::assign(QluPred, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (((((((get_base1(Qad, j, "Qad", 1) + get_base1(Qbo, j, "Qbo", 1)) + get_base1(Qbr, j, "Qbr", 1)) + get_base1(Qhe, j, "Qhe", 1)) + get_base1(QkiPred, j, "QkiPred", 1)) + get_base1(QliPred, j, "QliPred", 1)) + get_base1(Qmu, j, "Qmu", 1)) + get_base1(Qsk, j, "Qsk", 1)), 
                            "assigning variable QluPred");
                current_statement_begin__ = 435;
                stan::math::assign(KPred, rep_matrix(0, nCmt, nCmt));
                current_statement_begin__ = 437;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            ((-(get_base1(Qad, j, "Qad", 1)) / get_base1(VadPred, j, "VadPred", 1)) / (Kpad / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 438;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qad, j, "Qad", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 439;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (-(get_base1(QluPred, j, "QluPred", 1)) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 440;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list())), 
                            ((get_base1(QluPred, j, "QluPred", 1) / get_base1(Vlu, j, "Vlu", 1)) / (Kplu / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 441;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qbo, j, "Qbo", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 442;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                            ((-(get_base1(Qbo, j, "Qbo", 1)) / get_base1(VboPred, j, "VboPred", 1)) / (Kpbo / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 443;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(4), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qbr, j, "Qbr", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 444;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(4), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                            ((-(get_base1(Qbr, j, "Qbr", 1)) / get_base1(Vbr, j, "Vbr", 1)) / (Kpbr / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 445;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(5), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                            -(get_base1(kaPred, j, "kaPred", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 446;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(6), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(QguPred, j, "QguPred", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 447;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(6), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                            get_base1(kaPred, j, "kaPred", 1), 
                            "assigning variable KPred");
                current_statement_begin__ = 448;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(6), stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list())), 
                            ((-(get_base1(QguPred, j, "QguPred", 1)) / get_base1(Vgu, j, "Vgu", 1)) / (Kpgu / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 449;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(7), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qhe, j, "Qhe", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 450;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(7), stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list())), 
                            ((-(get_base1(Qhe, j, "Qhe", 1)) / get_base1(Vhe, j, "Vhe", 1)) / (Kphe / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 451;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(8), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(QkiPred, j, "QkiPred", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 452;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(8), stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list())), 
                            ((-((get_base1(QkiPred, j, "QkiPred", 1) + (fu * CLrenal))) / get_base1(Vki, j, "Vki", 1)) / (Kpki / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 453;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(9), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qha, j, "Qha", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 454;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(9), stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list())), 
                            ((get_base1(QguPred, j, "QguPred", 1) / get_base1(Vgu, j, "Vgu", 1)) / (Kpgu / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 455;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(9), stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list())), 
                            ((-((get_base1(QliPred, j, "QliPred", 1) + (fu * get_base1(CLhepaticPred, j, "CLhepaticPred", 1)))) / get_base1(Vli, j, "Vli", 1)) / (Kpli / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 456;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(9), stan::model::cons_list(stan::model::index_uni(13), stan::model::nil_index_list())), 
                            ((get_base1(Qsp, j, "Qsp", 1) / get_base1(Vsp, j, "Vsp", 1)) / (Kpsp / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 457;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(10), stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list())), 
                            ((-(get_base1(QluPred, j, "QluPred", 1)) / get_base1(Vlu, j, "Vlu", 1)) / (Kplu / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 458;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(10), stan::model::cons_list(stan::model::index_uni(14), stan::model::nil_index_list())), 
                            (get_base1(QluPred, j, "QluPred", 1) / get_base1(Vve, j, "Vve", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 459;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(11), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qmu, j, "Qmu", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 460;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(11), stan::model::cons_list(stan::model::index_uni(11), stan::model::nil_index_list())), 
                            ((-(get_base1(Qmu, j, "Qmu", 1)) / get_base1(VmuPred, j, "VmuPred", 1)) / (Kpmu / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 461;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(12), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qsk, j, "Qsk", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 462;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(12), stan::model::cons_list(stan::model::index_uni(12), stan::model::nil_index_list())), 
                            ((-(get_base1(Qsk, j, "Qsk", 1)) / get_base1(Vsk, j, "Vsk", 1)) / (Kpsk / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 463;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(13), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (get_base1(Qsp, j, "Qsp", 1) / get_base1(Var, j, "Var", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 464;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(13), stan::model::cons_list(stan::model::index_uni(13), stan::model::nil_index_list())), 
                            ((-(get_base1(Qsp, j, "Qsp", 1)) / get_base1(Vsp, j, "Vsp", 1)) / (Kpsp / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 465;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            ((get_base1(Qad, j, "Qad", 1) / get_base1(VadPred, j, "VadPred", 1)) / (Kpad / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 466;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                            ((get_base1(Qbo, j, "Qbo", 1) / get_base1(VboPred, j, "VboPred", 1)) / (Kpbo / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 467;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                            ((get_base1(Qbr, j, "Qbr", 1) / get_base1(Vbr, j, "Vbr", 1)) / (Kpbr / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 468;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list())), 
                            ((get_base1(Qhe, j, "Qhe", 1) / get_base1(Vhe, j, "Vhe", 1)) / (Kphe / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 469;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list())), 
                            ((get_base1(QkiPred, j, "QkiPred", 1) / get_base1(Vki, j, "Vki", 1)) / (Kpki / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 470;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list())), 
                            ((get_base1(QliPred, j, "QliPred", 1) / get_base1(Vli, j, "Vli", 1)) / (Kpli / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 471;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(11), stan::model::nil_index_list())), 
                            ((get_base1(Qmu, j, "Qmu", 1) / get_base1(VmuPred, j, "VmuPred", 1)) / (Kpmu / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 472;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(12), stan::model::nil_index_list())), 
                            ((get_base1(Qsk, j, "Qsk", 1) / get_base1(Vsk, j, "Vsk", 1)) / (Kpsk / BP)), 
                            "assigning variable KPred");
                current_statement_begin__ = 473;
                stan::model::assign(KPred, 
                            stan::model::cons_list(stan::model::index_uni(14), stan::model::cons_list(stan::model::index_uni(14), stan::model::nil_index_list())), 
                            (-(get_base1(QluPred, j, "QluPred", 1)) / get_base1(Vve, j, "Vve", 1)), 
                            "assigning variable KPred");
                current_statement_begin__ = 475;
                stan::model::assign(xPred, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list())), 
                            pmx_solve_linode(stan::model::rvalue(time, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "time"), stan::model::rvalue(amt, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "amt"), stan::model::rvalue(rate, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "rate"), stan::model::rvalue(ii, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "ii"), stan::model::rvalue(evid, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "evid"), stan::model::rvalue(cmt, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "cmt"), stan::model::rvalue(addl, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "addl"), stan::model::rvalue(ss, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "ss"), KPred, F, tlag), 
                            "assigning variable xPred");
                current_statement_begin__ = 485;
                for (int k = get_base1(start, j, "start", 1); k <= get_base1(end, j, "end", 1); ++k) {

                    current_statement_begin__ = 486;
                    stan::model::assign(cHatPred, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                ((stan::math::fmax(stan::math::machine_precision(), get_base1(xPred, 14, k, "xPred", 1)) / get_base1(Vve, j, "Vve", 1)) / BP), 
                                "assigning variable cHatPred");
                    current_statement_begin__ = 489;
                    if (as_bool(logical_eq(get_base1(time, k, "time", 1), 0))) {

                        current_statement_begin__ = 490;
                        stan::model::assign(cObsCond, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                    0, 
                                    "assigning variable cObsCond");
                        current_statement_begin__ = 491;
                        stan::model::assign(cObsPred, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                    0, 
                                    "assigning variable cObsPred");
                    } else {

                        current_statement_begin__ = 493;
                        stan::model::assign(cObsCond, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                    stan::math::exp(normal_rng(stan::math::log(get_base1(cHat, k, "cHat", 1)), sigma, base_rng__)), 
                                    "assigning variable cObsCond");
                        current_statement_begin__ = 494;
                        stan::model::assign(cObsPred, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                    stan::math::exp(normal_rng(stan::math::log(get_base1(cHatPred, k, "cHatPred", 1)), sigma, base_rng__)), 
                                    "assigning variable cObsPred");
                    }
                }
            }

            // validate, write generated quantities
            current_statement_begin__ = 386;
            check_greater_or_equal(function__, "cHatPred", cHatPred, 0);

            size_t cHatPred_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < cHatPred_j_1_max__; ++j_1__) {
                vars__.push_back(cHatPred(j_1__));
            }

            current_statement_begin__ = 387;
            check_greater_or_equal(function__, "cObsCond", cObsCond, 0);

            size_t cObsCond_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < cObsCond_j_1_max__; ++j_1__) {
                vars__.push_back(cObsCond(j_1__));
            }

            current_statement_begin__ = 388;
            check_greater_or_equal(function__, "cObsPred", cObsPred, 0);

            size_t cObsPred_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < cObsPred_j_1_max__; ++j_1__) {
                vars__.push_back(cObsPred(j_1__));
            }

            current_statement_begin__ = 389;
            check_greater_or_equal(function__, "thetaPred", thetaPred, 0);

            size_t thetaPred_j_2_max__ = nRandom;
            size_t thetaPred_j_1_max__ = nSubject;
            for (size_t j_2__ = 0; j_2__ < thetaPred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < thetaPred_j_1_max__; ++j_1__) {
                    vars__.push_back(thetaPred(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 393;
            check_greater_or_equal(function__, "VmuPred", VmuPred, 0);

            size_t VmuPred_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < VmuPred_j_1_max__; ++j_1__) {
                vars__.push_back(VmuPred(j_1__));
            }

            current_statement_begin__ = 394;
            check_greater_or_equal(function__, "VboPred", VboPred, 0);

            size_t VboPred_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < VboPred_j_1_max__; ++j_1__) {
                vars__.push_back(VboPred(j_1__));
            }

            current_statement_begin__ = 395;
            check_greater_or_equal(function__, "QguPred", QguPred, 0);

            size_t QguPred_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < QguPred_j_1_max__; ++j_1__) {
                vars__.push_back(QguPred(j_1__));
            }

            current_statement_begin__ = 396;
            check_greater_or_equal(function__, "QkiPred", QkiPred, 0);

            size_t QkiPred_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < QkiPred_j_1_max__; ++j_1__) {
                vars__.push_back(QkiPred(j_1__));
            }

            current_statement_begin__ = 397;
            check_greater_or_equal(function__, "CLhepaticPred", CLhepaticPred, 0);

            size_t CLhepaticPred_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < CLhepaticPred_j_1_max__; ++j_1__) {
                vars__.push_back(CLhepaticPred(j_1__));
            }

            current_statement_begin__ = 398;
            check_greater_or_equal(function__, "kaPred", kaPred, 0);

            size_t kaPred_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < kaPred_j_1_max__; ++j_1__) {
                vars__.push_back(kaPred(j_1__));
            }

            current_statement_begin__ = 400;
            check_greater_or_equal(function__, "VadPred", VadPred, 5);

            size_t VadPred_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < VadPred_j_1_max__; ++j_1__) {
                vars__.push_back(VadPred(j_1__));
            }

            current_statement_begin__ = 401;
            check_greater_or_equal(function__, "QliPred", QliPred, 0);

            size_t QliPred_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < QliPred_j_1_max__; ++j_1__) {
                vars__.push_back(QliPred(j_1__));
            }

            current_statement_begin__ = 402;
            check_greater_or_equal(function__, "QluPred", QluPred, 0);

            size_t QluPred_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < QluPred_j_1_max__; ++j_1__) {
                vars__.push_back(QluPred(j_1__));
            }

            current_statement_begin__ = 405;
            size_t etaPred_j_2_max__ = nSubject;
            size_t etaPred_j_1_max__ = nRandom;
            for (size_t j_2__ = 0; j_2__ < etaPred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < etaPred_j_1_max__; ++j_1__) {
                    vars__.push_back(etaPred(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 406;
            stan::math::check_corr_matrix(function__, "rho", rho);

            size_t rho_j_2_max__ = nRandom;
            size_t rho_j_1_max__ = nRandom;
            for (size_t j_2__ = 0; j_2__ < rho_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
                    vars__.push_back(rho(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 408;
            size_t xPred_j_2_max__ = nt;
            size_t xPred_j_1_max__ = nCmt;
            for (size_t j_2__ = 0; j_2__ < xPred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xPred_j_1_max__; ++j_1__) {
                    vars__.push_back(xPred(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 409;
            size_t KPred_j_2_max__ = nCmt;
            size_t KPred_j_1_max__ = nCmt;
            for (size_t j_2__ = 0; j_2__ < KPred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < KPred_j_1_max__; ++j_1__) {
                    vars__.push_back(KPred(j_1__, j_2__));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "theophLinPBPK1_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "VboHat";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VmuHat";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "QguHat";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "QkiHat";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "CLhepaticHat";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "kaHat";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "fu";
        param_names__.push_back(param_name_stream__.str());
        size_t omega_j_1_max__ = nRandom;
        for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "omega" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_j_2_max__ = nRandom;
        size_t L_j_1_max__ = nRandom;
        for (size_t j_2__ = 0; j_2__ < L_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t eta_j_2_max__ = nSubject;
        size_t eta_j_1_max__ = nRandom;
        for (size_t j_2__ = 0; j_2__ < eta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t thetaHat_j_1_max__ = nRandom;
            for (size_t j_1__ = 0; j_1__ < thetaHat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "thetaHat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_2_max__ = nRandom;
            size_t theta_j_1_max__ = nSubject;
            for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t K_j_2_max__ = nCmt;
            size_t K_j_1_max__ = nCmt;
            for (size_t j_2__ = 0; j_2__ < K_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < K_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "K" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t cHat_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < cHat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cHat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t x_j_2_max__ = nt;
            size_t x_j_1_max__ = nCmt;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Vbo_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < Vbo_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Vbo" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Vmu_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < Vmu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Vmu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Qgu_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < Qgu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qgu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Qki_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < Qki_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qki" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t CLhepatic_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < CLhepatic_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "CLhepatic" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t ka_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < ka_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ka" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Vad_k_0_max__ = nSubject;
            for (size_t k_0__ = 0; k_0__ < Vad_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Vad" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Qli_k_0_max__ = nSubject;
            for (size_t k_0__ = 0; k_0__ < Qli_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qli" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Qlu_k_0_max__ = nSubject;
            for (size_t k_0__ = 0; k_0__ < Qlu_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qlu" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "CLrenal";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "pKa";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "logP";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "BP";
            param_names__.push_back(param_name_stream__.str());
            size_t Kp_j_1_max__ = nOrgans;
            for (size_t j_1__ = 0; j_1__ < Kp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Kp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpad";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpbo";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpbr";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpgu";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kphe";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpki";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpli";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kplu";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpmu";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpsk";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpsp";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        size_t cHatPred_j_1_max__ = nt;
        for (size_t j_1__ = 0; j_1__ < cHatPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cHatPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cObsCond_j_1_max__ = nt;
        for (size_t j_1__ = 0; j_1__ < cObsCond_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cObsCond" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cObsPred_j_1_max__ = nt;
        for (size_t j_1__ = 0; j_1__ < cObsPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cObsPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t thetaPred_j_2_max__ = nRandom;
        size_t thetaPred_j_1_max__ = nSubject;
        for (size_t j_2__ = 0; j_2__ < thetaPred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < thetaPred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "thetaPred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t VmuPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < VmuPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "VmuPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t VboPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < VboPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "VboPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t QguPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < QguPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "QguPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t QkiPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < QkiPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "QkiPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t CLhepaticPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < CLhepaticPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "CLhepaticPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t kaPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < kaPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "kaPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t VadPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < VadPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "VadPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t QliPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < QliPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "QliPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t QluPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < QluPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "QluPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t etaPred_j_2_max__ = nSubject;
        size_t etaPred_j_1_max__ = nRandom;
        for (size_t j_2__ = 0; j_2__ < etaPred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < etaPred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "etaPred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_j_2_max__ = nRandom;
        size_t rho_j_1_max__ = nRandom;
        for (size_t j_2__ = 0; j_2__ < rho_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rho" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t xPred_j_2_max__ = nt;
        size_t xPred_j_1_max__ = nCmt;
        for (size_t j_2__ = 0; j_2__ < xPred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < xPred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xPred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t KPred_j_2_max__ = nCmt;
        size_t KPred_j_1_max__ = nCmt;
        for (size_t j_2__ = 0; j_2__ < KPred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < KPred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "KPred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "VboHat";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VmuHat";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "QguHat";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "QkiHat";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "CLhepaticHat";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "kaHat";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "fu";
        param_names__.push_back(param_name_stream__.str());
        size_t omega_j_1_max__ = nRandom;
        for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "omega" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_j_1_max__ = ((nRandom * (nRandom - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_j_2_max__ = nSubject;
        size_t eta_j_1_max__ = nRandom;
        for (size_t j_2__ = 0; j_2__ < eta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t thetaHat_j_1_max__ = nRandom;
            for (size_t j_1__ = 0; j_1__ < thetaHat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "thetaHat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_2_max__ = nRandom;
            size_t theta_j_1_max__ = nSubject;
            for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t K_j_2_max__ = nCmt;
            size_t K_j_1_max__ = nCmt;
            for (size_t j_2__ = 0; j_2__ < K_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < K_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "K" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t cHat_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < cHat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cHat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t x_j_2_max__ = nt;
            size_t x_j_1_max__ = nCmt;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Vbo_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < Vbo_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Vbo" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Vmu_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < Vmu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Vmu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Qgu_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < Qgu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qgu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Qki_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < Qki_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qki" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t CLhepatic_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < CLhepatic_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "CLhepatic" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t ka_j_1_max__ = nSubject;
            for (size_t j_1__ = 0; j_1__ < ka_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ka" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Vad_k_0_max__ = nSubject;
            for (size_t k_0__ = 0; k_0__ < Vad_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Vad" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Qli_k_0_max__ = nSubject;
            for (size_t k_0__ = 0; k_0__ < Qli_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qli" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Qlu_k_0_max__ = nSubject;
            for (size_t k_0__ = 0; k_0__ < Qlu_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qlu" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "CLrenal";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "pKa";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "logP";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "BP";
            param_names__.push_back(param_name_stream__.str());
            size_t Kp_j_1_max__ = nOrgans;
            for (size_t j_1__ = 0; j_1__ < Kp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Kp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpad";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpbo";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpbr";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpgu";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kphe";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpki";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpli";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kplu";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpmu";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpsk";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Kpsp";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        size_t cHatPred_j_1_max__ = nt;
        for (size_t j_1__ = 0; j_1__ < cHatPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cHatPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cObsCond_j_1_max__ = nt;
        for (size_t j_1__ = 0; j_1__ < cObsCond_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cObsCond" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cObsPred_j_1_max__ = nt;
        for (size_t j_1__ = 0; j_1__ < cObsPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cObsPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t thetaPred_j_2_max__ = nRandom;
        size_t thetaPred_j_1_max__ = nSubject;
        for (size_t j_2__ = 0; j_2__ < thetaPred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < thetaPred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "thetaPred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t VmuPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < VmuPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "VmuPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t VboPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < VboPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "VboPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t QguPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < QguPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "QguPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t QkiPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < QkiPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "QkiPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t CLhepaticPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < CLhepaticPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "CLhepaticPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t kaPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < kaPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "kaPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t VadPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < VadPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "VadPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t QliPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < QliPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "QliPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t QluPred_j_1_max__ = nSubject;
        for (size_t j_1__ = 0; j_1__ < QluPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "QluPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t etaPred_j_2_max__ = nSubject;
        size_t etaPred_j_1_max__ = nRandom;
        for (size_t j_2__ = 0; j_2__ < etaPred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < etaPred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "etaPred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_j_1_max__ = ((nRandom * (nRandom - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t xPred_j_2_max__ = nt;
        size_t xPred_j_1_max__ = nCmt;
        for (size_t j_2__ = 0; j_2__ < xPred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < xPred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xPred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t KPred_j_2_max__ = nCmt;
        size_t KPred_j_1_max__ = nCmt;
        for (size_t j_2__ = 0; j_2__ < KPred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < KPred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "KPred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

}  // namespace

typedef theophLinPBPK1_model_namespace::theophLinPBPK1_model stan_model;

namespace torsten {
namespace dsolve {
    template<typename... Args>
    inline auto pmx_ode_group_mpi_functor::operator()(Args&&... args) const {
        dummy_functor f; return f(std::forward<Args>(args)...);
    }

}
}
